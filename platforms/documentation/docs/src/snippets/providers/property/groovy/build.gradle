plugins {
    id 'groovy'
}

repositories {
    mavenCentral()
}

// tag::set-prop[]
// Setting a property
def simpleMessageProperty = project.objects.property(String)
simpleMessageProperty.set("Hello, World from a Property!")
// Accessing a property
println(simpleMessageProperty.get())
// end::set-prop[]

// tag::set-prov[]
// Setting a provider
def simpleMessageProvider = project.providers.provider { "Hello, World from a Provider!" }
// Accessing a provider
println(simpleMessageProvider.get())
// end::set-prov[]

// tag::introduction[]
// Define a custom task that prints a message
abstract class CustomTask extends DefaultTask {
    CustomTask() {
        // Configure the task to print a message when executed
        doLast {
            println("Executing custom task")
        }
    }
}

// Define a custom plugin that adds the custom task to the project
abstract class CustomPlugin implements Plugin<Project> {
    void apply(Project project) {
        // Create a lazy property (provider) for the custom task
        def customTaskProvider = project.tasks.register("customTask", CustomTask)

        // Configure a task to depend on the lazy property
        project.tasks.register("dependentTask") {
            dependsOn(customTaskProvider)
            doLast {
                println("Dependent task executed after custom task")
            }
        }
    }
}
// end::introduction[]

// Property
// tag::prop-managed[]
abstract class MyPropertyTask extends DefaultTask {
    @Input
    final Property<String> messageProperty = project.objects.property(String)

    @TaskAction
    void printMessage() {
        println(messageProperty.get())
    }
}

tasks.register('myPropertyTask', MyPropertyTask) {
    messageProperty.set("Hello, Gradle!")
}
// end::prop-managed[]

// Provider
// tag::prov-managed[]
abstract class MyProviderTask extends DefaultTask {
    @Input
    final Provider<String> messageProvider = project.providers.provider { "Hello, Gradle!" }

    @TaskAction
    void printMessage() {
        println(messageProvider.get())
    }
}

tasks.register('MyProviderTask', MyProviderTask)
// end::prov-managed[]

// Named managed type
// tag::named[]
interface MyNamedType {
    String getName()
}

class MyNamedTypeImpl implements MyNamedType {
    String name

    MyNamedTypeImpl(String name) {
        this.name = name
    }
}

class MyPluginExtension {
    NamedDomainObjectContainer<MyNamedType> myNamedContainer

    MyPluginExtension(Project project) {
        myNamedContainer = project.container(MyNamedType) { name ->
            new MyNamedTypeImpl(name)
        }
    }
}
// end::named[]
