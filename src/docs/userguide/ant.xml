<!--
  ~ Copyright 2009 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<chapter id="ant">
    <title>Using Ant from Gradle</title>
    <note>
        <para>This chapter is a work in progress.</para>
    </note>

    <para>Gradle provides excellent integration with Ant. You can use individual Ant tasks or entire Ant builds in your
        Gradle builds. In fact, you will find that it's far easier and more powerful to use Ant tasks in a Gradle build
        script, than it is to use Ant's XML format. You could even use Gradle as an Ant task scripting tool, and not use
        any other Gradle features in your builds.
    </para>

    <para>Ant can be divided into two layers. The first layer is the Ant language. It provides the syntax for the
        <filename>build.xml</filename>, the handling of the targets, special constructs like macrodefs, etc. Basically
        everything except the Ant tasks and types. Gradle understands this language, and allows you to import your Ant
        <filename>build.xml</filename>
        into a Gradle project. You can then use the targets of your Ant build as if they were Gradle tasks.
    </para>

    <para>The second layer of Ant is its wealth of Ant tasks and types, like <literal>javac</literal>,
        <literal>copy</literal> or <literal>jar</literal>. For this layer Gradle provides integration
        simply by relying on Groovy, and the fantastic <literal>AntBuilder</literal>.
    </para>

    <para>Finally, since build scripts are Groovy scripts, you can always execute an Ant build as an external process.
        Your build script may contain statements like:<literal>"ant clean compile".execute()</literal>.
        <footnote>
            <para>In Groovy you can execute Strings. To learn more about executing external processes with Groovy have a
                look in 'Groovy in Action' 9.3.2 or at the Groovy wiki
            </para>
        </footnote>
    </para>

    <section>
        <title>Using Ant tasks and types in your build</title>

        <para>In your build script, a property called <literal>ant</literal> is provided by Gradle. This is a reference
            to an instance of Groovy's <literal>AntBuilder</literal>. The <literal>AntBuilder</literal> is used to
            access Ant tasks, types and properties. It is used in the following way:
        </para>
        <itemizedlist>
            <listitem>
                <para>Ant task or type names correspond to <literal>ant</literal> method names.
                </para>
            </listitem>
            <listitem>
                <para>Ant task attributes correspond to arguments to these methods. The arguments are passed to the
                    method using a map.
                </para>
            </listitem>
            <listitem>
                <para>Nested Ant XML elements correspond to method calls of the passed closure.
                </para>
            </listitem>
            <listitem>
                <para>Nested text corresponds to an argument to these methods.
                </para>
            </listitem>
        </itemizedlist>

        <para>Let's look at a simple example. An Ant <literal>echo</literal> task is executed by calling the
            <literal>ant.echo()</literal> method. The attributes of the task are passed as parameters to the method.</para>
        <sample id="useAntTask" dir="userguide/ant/useAntTask" title="Using an Ant task">
            <sourcefile file="build.gradle"/>
            <output args="hello"/>
        </sample>

        <para>
            You can pass nested text to an Ant task by passing it as a parameter to the method call.
        </para>
        <sample id="taskWithNestedText" dir="userguide/ant/taskWithNestedText" title="Passing nested text to an Ant task">
            <sourcefile file="build.gradle"/>
            <output args="hello"/>
        </sample>

        <para>Nested elements are passed to an Ant task inside a closures. Nested elements are defined in the same way
            as tasks.</para>
        <sample id="taskWithNestedElements" dir="userguide/ant/taskWithNestedElements" title="Passing nested elements to an Ant task">
            <sourcefile file="build.gradle"/>
            <test args="zip"/>
        </sample>

        <para>You can also access Ant types.</para>
        <sample id="useAntType" dir="userguide/ant/useAntType" title="Using an Ant type">
            <sourcefile file="build.gradle"/>
            <test args="list"/>
        </sample>

        <para>More information about <literal>AntBuilder</literal> can be found in 'Groovy in Action' 8.4 or at the
            <ulink url="http://groovy.codehaus.org/Using+Ant+from+Groovy">Groovy Wiki</ulink>
        </para>

        <section>
            <title>Using external Ant tasks in your build</title>
            <para>You can use the <literal>typedef</literal> Ant task to define external Ant tasks, just as you would
                in a <literal>build.xml</literal> file:
            </para>
            <para>TODO - sample goes here</para>
            <para>
                Gradle's dependency management works well with the <literal>typedef</literal>.
            </para>
            <para>TODO - sample goes here</para>
        </section>
    </section>

    <section>
        <title>Ant properties and references</title>

        <para>There are several ways to set an Ant property, so that the property can be used by Ant tasks:</para>
        <sample id="antProperties" dir="userguide/ant/properties" title="Setting an Ant property">
            <sourcefile file="build.gradle" snippet="set-property"/>
            <sourcefile file="build.xml" snippet="set-property"/>
        </sample>
        <para>There are several ways to get an Ant property which has been set by an Ant task:</para>
        <sample id="antProperties" dir="userguide/ant/properties" title="Getting an Ant property">
            <sourcefile file="build.xml" snippet="get-property"/>
            <sourcefile file="build.gradle" snippet="get-property"/>
        </sample>
        <para>There are several ways to set an Ant reference:</para>
        <sample id="antProperties" dir="userguide/ant/properties" title="Setting an Ant reference">
            <sourcefile file="build.gradle" snippet="set-reference"/>
            <sourcefile file="build.xml" snippet="set-reference"/>
        </sample>
        <para>There are several ways to get an Ant reference:</para>
        <sample id="antProperties" dir="userguide/ant/properties" title="Getting an Ant reference">
            <sourcefile file="build.xml" snippet="get-reference"/>
            <sourcefile file="build.gradle" snippet="get-reference"/>
        </sample>
    </section>

    <section>
        <title>Importing an Ant build</title>
        <para>You can use the <firstterm>Ant Plugin</firstterm> to import an Ant build into your Gradle project.
        </para>
        <sample id="antHello" dir="userguide/ant/hello" title="Importing an Ant build">
            <sourcefile file="build.gradle"/>
            <sourcefile file="build.xml"/>
            <output args="hello"/>
        </sample>
        <para>Each Ant target is treated as a Gradle task. This means you can manipulate and execute the Ant targets in
            exactly the same way as Gradle tasks. For example, you can add a task which depends on an Ant target:
        </para>
        <sample id="dependsOnAntTarget" dir="userguide/ant/dependsOnAntTarget" title="Task that depends on Ant target">
            <sourcefile file="build.gradle"/>
            <output args="intro"/>
        </sample>
        <para>Or, you can add behaviour to an Ant target:</para>
        <sample id="addBehaviourToAntTarget" dir="userguide/ant/addBehaviourToAntTarget" title="Adding behaviour to an Ant target">
            <sourcefile file="build.gradle"/>
            <output args="hello"/>
        </sample>
        <para>It is also possible for an Ant target to depend on a Gradle task:</para>
        <sample id="dependsOnTask" dir="userguide/ant/dependsOnTask" title="Ant target that depends on Gradle task">
            <sourcefile file="build.gradle"/>
            <sourcefile file="build.xml"/>
            <output args="hello"/>
        </sample>
    </section>
</chapter>
