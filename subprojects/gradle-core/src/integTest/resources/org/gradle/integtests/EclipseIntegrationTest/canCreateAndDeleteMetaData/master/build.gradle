import org.custommonkey.xmlunit.Diff
import org.custommonkey.xmlunit.ElementNameAndAttributeQualifier
import org.custommonkey.xmlunit.XMLAssert
import junit.framework.AssertionFailedError

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'xmlunit:xmlunit:1.3'
    }
}

defaultTasks 'eclipse', 'cleanEclipse'

allprojects {
    apply plugin: 'eclipse'
}

subprojects {
    repositories {
        mavenCentral()
    }

    group = 'org.gradle'
    version = '1.0'
}

allprojects {
    afterEvaluate { p ->
        configure(p) {
            eclipseProject.doLast {
                compareXmlWithIgnoringOrder(getExpectedXml(file("$rootDir/../expectedFiles/${project.name}Project.xml")),
                        file(".project").text)
            }

            if (p.hasProperty('eclipseClasspath')) {
                eclipseClasspath {
                    downloadJavadoc = true
                    doLast {
                        compareXmlWithIgnoringOrder(getExpectedXml(file("$rootDir/../expectedFiles/${project.name}Classpath.xml")),
                                file(".classpath").text)
                    }
                }
            }

            if (p.hasProperty('eclipseWtp')) {
                eclipseWtp {
                    doLast {
                        compareXmlWithIgnoringOrder(getExpectedXml(file("$rootDir/../expectedFiles/${project.name}WtpComponent.xml")),
                                file(".settings/org.eclipse.wst.common.component").text)
                        compareXmlWithIgnoringOrder(getExpectedXml(file("$rootDir/../expectedFiles/${project.name}WtpFacet.xml")),
                                file(".settings/org.eclipse.wst.common.project.facet.core.xml").text)
                    }
                }
            }
            cleanEclipse.doLast {
                assert !file(".classpath").isFile()
                assert !file(".project").isFile()
            }
        }
    }
}

void compareXmlWithIgnoringOrder(String expectedXml, String actualXml) {
    Diff diff = new Diff(expectedXml, actualXml)
    diff.overrideElementQualifier(new ElementNameAndAttributeQualifier())
    try {
        XMLAssert.assertXMLEqual(diff, true)
    } catch (AssertionFailedError error) {
        throw new AssertionFailedError("Unexpected content for generated file: ${error.message}\nExpected:\n${expectedXml}\nActual:\n${actualXml}").initCause(error)
    }
}

String getExpectedXml(File file) {
    def cache = new File(gradle.gradleUserHomeDir, "/cache")
    return file.text.replace('@CACHE_DIR@', cache.absolutePath)
}

