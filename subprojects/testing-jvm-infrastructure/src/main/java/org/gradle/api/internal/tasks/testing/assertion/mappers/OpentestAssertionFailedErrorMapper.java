/*
 * Copyright 2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.gradle.api.internal.tasks.testing.assertion.mappers;

import org.gradle.api.tasks.testing.TestFailure;

import java.util.List;

public class OpentestAssertionFailedErrorMapper extends AssertionMapper {

    public static final String CLASS_NAME = "org.opentest4j.AssertionFailedError";

    public static boolean accepts(Class<? extends Throwable> cls) {
        return isClassOrSubclass(CLASS_NAME, cls);
    }

    public static TestFailure map(Throwable failure, List<TestFailure> causeFailures) throws Exception {
        Object expectedValueWrapper = invokeMethod(failure, "getExpected", Object.class);
        Object expectedValue = invokeMethod(expectedValueWrapper, "getValue", Object.class);

        Object actualValueWrapper = invokeMethod(failure, "getActual", Object.class);
        Object actualValue = invokeMethod(actualValueWrapper, "getValue", Object.class);

        if (expectedValue.getClass().getName().equals("org.opentest4j.FileInfo") && actualValue.getClass().getName().equals("org.opentest4j.FileInfo")) {
            String expectedPath = invokeMethod(expectedValue, "getPath", String.class);
            byte[] expectedContent = invokeMethod(expectedValue, "getContents", byte[].class);
            String actualPath = invokeMethod(actualValue, "getPath", String.class);
            byte[] actualContent = invokeMethod(actualValue, "getContents", byte[].class);
            return TestFailure.fromFileComparisonFailure(failure, expectedPath, actualPath, expectedContent, actualContent, causeFailures);
        } else {
            String expectedString = invokeMethod(expectedValueWrapper, "getStringRepresentation", String.class);
            String actualString = invokeMethod(failure, "getActualStringRepresentation", String.class);
            return TestFailure.fromTestAssertionFailure(failure, expectedString, actualString, causeFailures);
        }
    }
}
