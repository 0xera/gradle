/*
 * Copyright 2010 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.apache.maven.settings.Settings

apply id: 'war'
// START SNIPPET use-plugin
apply id: 'maven'
// END SNIPPET use-plugin

group = 'gradle'
version = '1.0'
archivesBaseName = 'mywar'
buildDirName = 'target'

repositories {
    flatDir(dirs: "$rootDir/lib")
}

dependencies {
    compile("group1:compile:1.0") {
        exclude(group: 'excludeGroup', module: 'excludeArtifact')
    }
    providedCompile "group2:providedCompile:1.0@jar"
    runtime "group3:runtime:1.0"
    providedRuntime("group4:providedRuntime:1.0@zip") {
        artifact {
            name = 'providedRuntime-util'
            type = 'war'
        }
    }
    testCompile "group5:testCompile:1.0"
    testRuntime "group6:testRuntime:1.0"
}


// Include a javadoc zip

task javadocZip(type: Zip, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocZip
}

// Configure the release and snapshot repositories

def deployer = null
uploadArchives {
    repositories {
        deployer = mavenDeployer {
            repository(url: "file://localhost/$projectDir/pomRepo/")
            snapshotRepository(url: "file://localhost/$projectDir/snapshotRepo/")
        }
    }
}

// Customize the contents of the pom

installer = install.repositories.mavenInstaller

if (hasProperty('customVersion')) {
    [installer, deployer]*.pom*.version = customVersion
    installer.pom.groupId = 'installGroup'
    deployer.pom.groupId = 'deployGroup'
}

// For our integration tests

install.doLast {
    Settings settings = installer.settings
    new File(buildDir, "localRepoPath.txt").write(settings.localRepository)
}

clean {
    from 'pomRepo'
    from 'snapshotRepo'
}
