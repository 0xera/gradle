import org.apache.maven.settings.Settings

usePlugin('war')
usePlugin('maven')

group = 'gradle'
version = '1.0'
archivesBaseName = 'mywar'
buildDirName = 'target'

repositories {
    flatDir(dirs: "$rootDir/lib")
}

dependencies {
    compile("group1:compile:1.0") {
        exclude(group: 'excludeGroup', module: 'excludeArtifact')
    }
    providedCompile "group2:providedCompile:1.0@jar"
    runtime "group3:runtime:1.0"
    providedRuntime("group4:providedRuntime:1.0@zip") {
        artifact {
            name = 'providedRuntime-util'
            type = 'war'
        }
    }
    testCompile "group5:testCompile:1.0"
    testRuntime "group6:testRuntime:1.0"
}


// Include a javadoc zip

task javadocZip(type: Zip, dependsOn: javadoc) {
    classifier = 'javadoc'
    fileSet(dir: javadoc.destinationDir)
}

artifacts {
    archives javadocZip
}

// Configure the repository and snapshot repository

def deployer = null
uploadArchives {
    repositories {
        deployer = mavenDeployer {
            repository(url: "file://localhost/$projectDir/pomRepo/")
            snapshotRepository(url: "file://localhost/$projectDir/snapshotRepo/")
        }
    }
}

// Customize the contents of the pom

installer = install.repositories.mavenInstaller

[installer, deployer]*.pom*.licenseHeader = '<!-- mylicenseheader -->'
if (hasProperty('customVersion')) {
    [installer, deployer]*.pom*.version = customVersion
    installer.pom.groupId = 'installGroup'
    deployer.pom.groupId = 'deployGroup'
}

// For our integration tests

install.doLast {install ->
    Settings settings = installer.settings
    new File(buildDir, "localRepoPath.txt").write(settings.getLocalRepository())

}

clean.doFirst {
    ant.delete(dir: 'pomRepo')
    ant.delete(dir: 'snapshotRepo')
}
