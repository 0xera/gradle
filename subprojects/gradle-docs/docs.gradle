import org.gradle.build.docs.UserGuideTransformTask
import org.gradle.build.docs.ExtractSnippetsTask
import org.gradle.build.docs.SampleElementValidator
import org.gradle.build.samples.WrapperProjectCreator

usePlugin('base')

configurations {
    ftpAntTask
    userGuideStyleSheets
    userGuideTask
}

dependencies {
    ftpAntTask module("org.apache.ant:ant-commons-net:1.7.0") {
        module("commons-net:commons-net:1.4.1") {
            dependencies("oro:oro:2.0.8@jar")
        }
    }

    userGuideTask 'xalan:xalan:2.7.1', 'xerces:xercesImpl:2.9.1'
    userGuideTask module('xhtmlrenderer:xhtmlrenderer:R8rc1') {
        dependency 'itext:itext:2.0.8@jar'
    }
    userGuideTask 'xslthl:xslthl:2.0.1@jar'

    userGuideStyleSheets 'docbook:docbook-xsl:1.75.2@zip'
}

srcDocsDir = file('src/docs')
userguideSrcDir = new File(srcDocsDir, 'userguide')

userguideDir = new File(docsDir, 'userguide')
userguidePdfFile = new File(userguideDir, 'userguide.pdf')
userguideSingleHtmlFile = new File(userguideDir, 'userguide_single.html')
docbookDir = new File(project.buildDir, 'docbook/stylesheets')
snippetsDir = new File(project.buildDir, 'docbook/snippets')
javadocDir = new File(docsDir, 'javadoc')
groovydocDir = new File(docsDir, 'groovydoc')

task userguide(dependsOn: ['userguideHtml', 'userguideSingleHtml', 'userguidePdf'], description: 'Generates the userguide')

task samples(type: ExtractSnippetsTask) {
    sourceFiles = ant.fileset(dir: samplesSrcDir) {
        exclude(name: 'userguideOutput/**')
        exclude(name: 'userguide/tutorial/antChecksumFiles/**')
    }
    destDir = samplesDir
    snippetsDir = project.snippetsDir
}
samples << {
    copy {
        from samplesSrcDir
        into samplesDir
        include 'userguide/tutorial/antChecksumFiles/**'
    }
}

task userguideSrc(type: UserGuideTransformTask, dependsOn: samples) {
    sourceFile = new File(userguideSrcDir, 'userguide.xml')
    destFile = new File(docbookSrc, 'userguide.xml')
    snippetsDir = project.snippetsDir
    classpath = configurations.userGuideTask
    validator = new SampleElementValidator()
}
userguideSrc.doFirst {
    userguideSrc.javadocUrl = "http://www.gradle.org/${javadocRemoteDir}"
    userguideSrc.groovydocUrl = "http://www.gradle.org/${groovydocRemoteDir}"
}

task userguideStyleSheets << {
    ant.unzip(src: configurations.userGuideStyleSheets.singleFile, dest: docbookDir) {
        globmapper(from: 'docbook-xsl-1.75.2/*', to: '*')
    }
    copy {
        from new File(srcDocsDir, 'stylesheets')
        into docbookDir
        include '*.xsl'
    }
}

task userguideHtml(dependsOn: [userguideSrc, userguideStyleSheets]) << {
    ant.java(classname: 'org.apache.xalan.xslt.Process', failonerror: true, fork: true) {
        jvmarg(value: '-Xmx128m')
        sysproperty(key: 'xslthl.config', value: new File("$docbookDir/highlighting/xslthl-config.xml").toURI())
        arg(value: '-in')
        arg(value: new File(docbookSrc, 'userguide.xml'))
        arg(value: '-xsl')
        arg(value: new File(docbookDir, 'userGuideHtml.xsl'))
        arg(line: "-param base.dir ${userguideDir}/")
        classpath {
            path(path: configurations.userGuideTask.asPath)
            path(location: new File(docbookDir, 'extensions/xalan27.jar'))
        }
    }
    copy {
        from userguideSrcDir
        into userguideDir
        include 'style.css'
        include 'images/*.png'
    }
}

task userguideSingleHtml(dependsOn: [userguideSrc, userguideStyleSheets]) << {
    userguideSingleHtmlFile.parentFile.mkdirs()

    ant.java(classname: 'org.apache.xalan.xslt.Process', failonerror: true, fork: true) {
        jvmarg(value: '-Xmx128m')
        sysproperty(key: 'xslthl.config', value: new File("$docbookDir/highlighting/xslthl-config.xml").toURI())
        arg(value: '-in')
        arg(value: new File(docbookSrc, 'userguide.xml'))
        arg(value: '-out')
        arg(value: userguideSingleHtmlFile)
        arg(value: '-xsl')
        arg(value: new File(docbookDir, 'userGuideSingleHtml.xsl'))
        classpath {
            path(path: configurations.userGuideTask.asPath)
            path(location: new File(docbookDir, 'extensions/xalan27.jar'))
        }
    }
    copy {
        from userguideSrcDir
        into userguideSingleHtmlFile.parentFile
        include 'style.css'
        include 'images/*.png'
    }
}

task userguidePdf(dependsOn: [userguideSrc, userguideStyleSheets]) << {
    File pdfSourceHtml = new File(docbookSrc, 'userguidePdf.html')

    pdfSourceHtml.parentFile.mkdirs()
    userguidePdfFile.parentFile.mkdirs()

    println "transforming docbook -> html"

    ant.java(classname: 'org.apache.xalan.xslt.Process', failonerror: true, fork: true) {
        jvmarg(value: '-Xmx128m')
        sysproperty(key: 'xslthl.config', value: new File("$docbookDir/highlighting/xslthl-config.xml").toURI())
        arg(value: '-in')
        arg(value: new File(docbookSrc, 'userguide.xml'))
        arg(value: '-out')
        arg(value: pdfSourceHtml)
        arg(value: '-xsl')
        arg(value: new File(docbookDir, 'userGuidePdf.xsl'))
        classpath {
            path(path: configurations.userGuideTask.asPath)
            path(location: new File(docbookDir, 'extensions/xalan27.jar'))
        }
    }

    copy {
        from userguideSrcDir
        into pdfSourceHtml.parentFile
        include 'style.css'
        include 'print.css'
        include 'images/*.png'
    }

    println "transforming html -> pdf, using ${System.getProperty('java.vm.version')}"

    def uris = configurations.userGuideTask.files.collect {it.toURI().toURL()}

    println "using classpath $uris"

    def classloader = new URLClassLoader(uris as URL[], getClass().classLoader)

    println "classloader constructed"

    def renderer = classloader.loadClass('org.xhtmlrenderer.pdf.ITextRenderer').newInstance()

    println "clases loaded"

    renderer.setDocument(pdfSourceHtml)

    println "document loaded"

    renderer.layout()

    println "layout done"

    userguidePdfFile.withOutputStream {
        renderer.createPDF(it)
    }

    println "done"
}

[userguidePdf].each {
    it.onlyIf { !System.getProperty("os.name").toLowerCase().contains('windows') }
}

task javadoc(type: Javadoc) {
    source groovyProjects().collect {project -> project.sourceSets.main.allJava }
    destinationDir = javadocDir
    classpath = files(groovyProjects().collect {project -> [project.sourceSets.main.compileClasspath, project.sourceSets.main.classes] })
    include 'org/gradle/api/**'
    include 'org/gradle/*'
    include 'org/gradle/external/javadoc/**'
    exclude 'org/gradle/api/internal/**'
    optionsFile = file("$buildDir/tmp/javadoc.options")
    doFirst {
        title = "Gradle API $version"
    }
}

task groovydoc(type: Groovydoc) {
    source groovyProjects().collect { project -> project.sourceSets.main.groovy }
    destinationDir = groovydocDir
    include 'org/gradle/api/**'
    include 'org/gradle/*'
    include 'org/gradle/external/javadoc/**'
    exclude 'org/gradle/api/internal/**'
    doFirst {
        title = "Gradle API $version"
    }
    groovyClasspath = project(':core').configurations.groovy
}


task docs(dependsOn: [javadoc, groovydoc, 'userguide', 'distDocs'])

task uploadDocs(dependsOn: docs) << {
    ftp(action: 'mkdir', remotedir: docsRemoteDir)
    ftp(action: 'delete', remotedir: docsRemoteDir) {
        fileset() {
            include(name: '**/*')
        }
    }
    ftp(action: 'send', remotedir: docsRemoteDir) {
        fileset(dir: docsDir)
    }
}

task distDocs(type: UserGuideTransformTask, dependsOn: userguideStyleSheets) {
    standalone = true
    sourceFile = new File(userguideSrcDir, 'gettingStarted.xml')
    destFile = new File(docbookSrc, 'gettingStarted.xml')
    snippetsDir = project.snippetsDir
    classpath = configurations.userGuideTask
}
distDocs.doFirst {
    distDocs.javadocUrl = "http://www.gradle.org/${javadocRemoteDir}"
    distDocs.groovydocUrl = "http://www.gradle.org/${groovydocRemoteDir}"
}
distDocs << {
    distDocsDir.mkdirs()

    copy {
        from userguideSrcDir
        into docbookDir
        include 'style.css'
    }
    ant.java(classname: 'org.apache.xalan.xslt.Process', failonerror: true, fork: true) {
        jvmarg(value: '-Xmx128m')
        sysproperty(key: 'xslthl.config', value: new File("$docbookDir/highlighting/xslthl-config.xml").toURI())
        sysproperty(key: 'org.apache.xerces.xni.parser.XMLParserConfiguration', value: 'org.apache.xerces.parsers.XIncludeParserConfiguration')
        arg(value: '-in')
        arg(value: new File(docbookSrc , 'gettingStarted.xml'))
        arg(value: '-out')
        arg(value: new File(distDocsDir, 'getting-started.html'))
        arg(value: '-xsl')
        arg(value: new File(docbookDir, 'standaloneHtml.xsl'))
        classpath {
            path(path: configurations.userGuideTask.asPath)
            path(location: new File(docbookDir, 'extensions/xalan27.jar'))
        }
    }
}

task websiteDocs(type: UserGuideTransformTask, dependsOn: userguideStyleSheets) {
    standalone = true
    sourceFile = new File(userguideSrcDir, 'gettingStarted.xml')
    destFile = new File(docbookSrc, 'gettingStarted.xml')
    snippetsDir = project.snippetsDir
    classpath = configurations.userGuideTask
}
websiteDocs.doFirst {
    websiteDocs.javadocUrl = "http://www.gradle.org/${javadocRemoteDir}"
    websiteDocs.groovydocUrl = "http://www.gradle.org/${groovydocRemoteDir}"
}
websiteDocs << {
    File websiteDocs = new File(buildDir, 'docs')
    websiteDocs.mkdirs()

    ant.java(classname: 'org.apache.xalan.xslt.Process', failonerror: true, fork: true) {
        jvmarg(value: '-Xmx128m')
        arg(value: '-in')
        arg(value: new File(docbookSrc , 'gettingStarted.xml'))
        arg(value: '-out')
        arg(value: new File(websiteDocs, 'getting-started.html'))
        arg(value: '-xsl')
        arg(value: new File(docbookDir, 'docFragment.xsl'))
        classpath {
            path(path: configurations.userGuideTask.asPath)
            path(location: new File(docbookDir, 'extensions/xalan27.jar'))
        }
    }
}

void ftp(Map args, Closure antFileset = {}) {
    ant {
        taskdef(name: 'ftp',
                classname: 'org.apache.tools.ant.taskdefs.optional.net.FTP',
                classpath: configurations.ftpAntTask.asPath)
        Map ftpArgs = args + [
                server: 'ftp.gradle.org',
                userid: websiteFtpUserName,
                password: websiteFtpUserPassword
        ]
        delegate.ftp(ftpArgs) {
            antFileset.delegate = delegate
            antFileset()
        }
    }
}




