import org.gradle.build.docs.UserGuideTransformTask
import org.gradle.build.docs.ExtractSnippetsTask
import org.gradle.build.docs.SampleElementValidator

usePlugin('base')

configurations {
    ftpAntTask
    userGuideStyleSheets
    userGuideTask
}

dependencies {
    ftpAntTask module("org.apache.ant:ant-commons-net:1.7.0") {
        module("commons-net:commons-net:1.4.1") {
            dependencies("oro:oro:2.0.8@jar")
        }
    }

    userGuideTask 'xalan:xalan:2.7.1', 'xerces:xercesImpl:2.9.1'
    userGuideTask module('xhtmlrenderer:xhtmlrenderer:R8rc1') {
        dependency 'itext:itext:2.0.8@jar'
    }
    userGuideTask 'xslthl:xslthl:2.0.1@jar'

    userGuideStyleSheets 'docbook:docbook-xsl:1.75.2@zip'
}

RemoteLocations remoteLocations = new RemoteLocations(version: version)

srcDocsDir = file('src/docs')
userguideSrcDir = new File(srcDocsDir, 'userguide')

docsDir = file("$buildDir/docs")
userguideDir = new File(docsDir, 'userguide')
docbookDir = new File(buildDir, 'docbookStylesheets')
distDocsDir = new File(buildDir, 'distDocs')
samplesDir = file("$buildDir/samples")
docbookSrc = new File(project.buildDir, 'docbookSrc')
samplesSrcDir = file('src/samples')

tasks.withType(Docbook2Xhtml).allObjects { task->
    task.classpath = configurations.userGuideTask
    task.stylesheetsDir = docbookDir
}
tasks.withType(UserGuideTransformTask).allObjects { task->
    task.classpath = configurations.userGuideTask
    task.dependsOn samples
    task.snippetsDir = samples.snippetsDir
}

task samples(type: ExtractSnippetsTask) {
    source samplesSrcDir
    exclude 'userguideOutput/**'
    exclude 'userguide/tutorial/antChecksumFiles/**'
    destDir = samplesDir
    snippetsDir = new File(buildDir, 'snippets')
    doLast {
        copy {
            from samplesSrcDir
            into samplesDir
            include 'userguide/tutorial/antChecksumFiles/**'
        }
    }
}

task userguideDocbook(type: UserGuideTransformTask, dependsOn: samples) {
    sourceFile = new File(userguideSrcDir, 'userguide.xml')
    destFile = new File(docbookSrc, 'userguide.xml')
    javadocUrl = '../javadoc'
    groovydocUrl = '../groovydoc'
}

task remoteUserguideDocbook(type: UserGuideTransformTask, dependsOn: samples) {
    sourceFile = new File(userguideSrcDir, 'userguide.xml')
    destFile = new File(docbookSrc, 'remoteUserguide.xml')
    doFirst { task ->
        task.javadocUrl = remoteLocations.javadocUrl
        task.groovydocUrl = remoteLocations.groovydocUrl
    }
}

task userguideStyleSheets(type: Copy) {
    File stylesheetsDir = new File(srcDocsDir, 'stylesheets')
    into docbookDir
    from(stylesheetsDir) {
        include '*.xsl'
    }
    from(userguideSrcDir) {
        include 'style.css'
    }
    from(zipTree(configurations.userGuideStyleSheets.singleFile)) {
        // Remove the prefix
        eachFile { fcd -> fcd.path = fcd.path.replaceFirst('^docbook-xsl-[0-9\\.]+/', '') }
    }
}

task userguideHtml(type: Docbook2Xhtml, dependsOn: [userguideDocbook, userguideStyleSheets]) {
    sourceFile = userguideDocbook.destFile
    destDir = userguideDir
    stylesheetName = 'userGuideHtml.xsl'
    resources = fileTree {
        from userguideSrcDir
        include 'style.css'
        include 'images/*.png'
    }
}

task userguideSingleHtml(type: Docbook2Xhtml, dependsOn: [userguideDocbook, userguideStyleSheets]) {
    sourceFile = userguideDocbook.destFile
    destFile = new File(userguideDir, 'userguide_single.html')
    stylesheetName = 'userGuideSingleHtml.xsl'
    resources = fileTree {
        from userguideSrcDir
        include 'style.css'
        include 'images/*.png'
    }
}

task userguideXhtml(type: Docbook2Xhtml, dependsOn: [remoteUserguideDocbook, userguideStyleSheets]) {
    sourceFile = remoteUserguideDocbook.destFile
    destFile = new File(docbookSrc, 'userguidePdf.html')
    stylesheetName = 'userGuidePdf.xsl'
    resources = fileTree {
        from userguideSrcDir
        include 'style.css'
        include 'print.css'
        include 'images/*.png'
    }
}

task userguidePdf(type: Xhtml2Pdf, dependsOn: userguideXhtml) {
    sourceFile = userguideXhtml.destFile
    destFile = new File(userguideDir, 'userguide.pdf')
    classpath = configurations.userGuideTask
}

task javadoc(type: Javadoc) {
    source groovyProjects().collect {project -> project.sourceSets.main.allJava }
    destinationDir = new File(docsDir, 'javadoc')
    classpath = files(groovyProjects().collect {project -> [project.sourceSets.main.compileClasspath, project.sourceSets.main.classes] })
    include 'org/gradle/api/**'
    include 'org/gradle/*'
    include 'org/gradle/external/javadoc/**'
    exclude '**/internal/**'
    optionsFile = file("$buildDir/tmp/javadoc.options")
    doFirst {
        title = "Gradle API $version"
    }
}

task groovydoc(type: Groovydoc) {
    source groovyProjects().collect {project -> project.sourceSets.main.groovy }
    destinationDir = new File(docsDir, 'groovydoc')
    includes = javadoc.includes
    excludes = javadoc.excludes
    doFirst {
        title = "Gradle API $version"
    }
    groovyClasspath = project(':core').configurations.groovy
}

task userguideFragmentSrc(type: UserGuideTransformTask, dependsOn: [userguideStyleSheets, samples]) {
    standalone = true
    sourceFile = new File(userguideSrcDir, 'gettingStarted.xml')
    destFile = new File(docbookSrc, 'gettingStarted.xml')
    doFirst {task ->
        task.javadocUrl = remoteLocations.javadocUrl
        task.groovydocUrl = remoteLocations.groovydocUrl
    }
}

task distDocs(type: Docbook2Xhtml, dependsOn: [userguideFragmentSrc, userguideStyleSheets]) {
    sourceFile = userguideFragmentSrc.destFile
    destFile = new File(distDocsDir, 'getting-started.html')
    stylesheetName = 'standaloneHtml.xsl'
}

task websiteDocs(type: Docbook2Xhtml, dependsOn: [userguideFragmentSrc, userguideStyleSheets]) {
    File websiteDocs = new File(buildDir, 'websiteDocs')
    sourceFile = userguideFragmentSrc.destFile
    destFile = new File(websiteDocs, 'getting-started.html')
    stylesheetName = 'docFragment.xsl'
}

task userguide(dependsOn: [userguideHtml, userguideSingleHtml, userguidePdf], description: 'Generates the userguide')

task docs(dependsOn: [javadoc, groovydoc, userguide, distDocs])

task uploadDocs(dependsOn: docs) << {
    ftp(action: 'mkdir', remotedir: remoteLocations.docsRemoteDir)
    ftp(action: 'delete', remotedir: remoteLocations.docsRemoteDir) {
        fileset() {
            include(name: '**/*')
        }
    }
    ftp(action: 'send', remotedir: remoteLocations.docsRemoteDir) {
        fileset(dir: docsDir)
    }
}

void ftp(Map args, Closure antFileset = {}) {
    ant {
        taskdef(name: 'ftp',
                classname: 'org.apache.tools.ant.taskdefs.optional.net.FTP',
                classpath: configurations.ftpAntTask.asPath)
        Map ftpArgs = args + [
                server: 'ftp.gradle.org',
                userid: websiteFtpUserName,
                password: websiteFtpUserPassword
        ]
        delegate.ftp(ftpArgs) {
            antFileset.delegate = delegate
            antFileset()
        }
    }
}

class RemoteLocations {
    def version

    static final GRADLE_ORG_URL = "http://www.gradle.org"

    String getDistributionUploadUrl() {
        version.isRelease() ? 'https://dav.codehaus.org/dist/gradle' : 'https://dav.codehaus.org/snapshots.dist/gradle'
    }

    String getDocsRemoteDir() {
        (version.isRelease() ? version.toString() : 'latest') + '/docs'
    }

    String getJavadocUrl() {
        "$GRADLE_ORG_URL/${getDocsRemoteDir()}/javadoc"
    }

    String getGroovydocUrl() {
        "$GRADLE_ORG_URL/${getDocsRemoteDir()}/groovydoc"
    }
}

class Docbook2Xhtml extends DefaultTask {
    @InputFiles
    FileCollection classpath

    @InputFile
    File sourceFile

    @OutputFile @Optional
    File destFile

    @OutputDirectory @Optional
    File destDir

    @InputDirectory
    File stylesheetsDir

    String stylesheetName

    @InputFiles @Optional
    FileCollection resources

    @TaskAction
    def transform() {
        if (!((destFile != null) ^ (destDir != null))) {
            throw new InvalidUserDataException("Must specify exactly 1 of output file or dir.")
        }
        ant.java(classname: 'org.apache.xalan.xslt.Process', failonerror: true, fork: true) {
            jvmarg(value: '-Xmx256m')
            arg(value: '-in')
            arg(value: sourceFile)
            if (destFile) {
                arg(value: '-out')
                arg(value: destFile)
            }
            arg(value: '-xsl')
            arg(value: new File(stylesheetsDir, stylesheetName))
            if (destDir) {
                arg(line: "-param base.dir ${destDir}/")
            }
            sysproperty(key: 'xslthl.config', value: new File("$stylesheetsDir/highlighting/xslthl-config.xml").toURI())
            sysproperty(key: 'org.apache.xerces.xni.parser.XMLParserConfiguration', value: 'org.apache.xerces.parsers.XIncludeParserConfiguration')
            classpath {
                path(path: classpath.asPath)
                path(location: new File(stylesheetsDir, 'extensions/xalan27.jar'))
            }
        }

        if (resources) {
            project.copy {
                into this.destDir ?: destFile.parentFile
                from resources
            }
        }
    }
}

class Xhtml2Pdf extends DefaultTask {
    @InputFile
    File sourceFile

    @OutputFile
    File destFile

    @InputFiles
    FileCollection classpath

    def Xhtml2Pdf() {
        onlyIf { !System.getProperty("os.name").toLowerCase().contains('windows') }
    }

    @TaskAction
    def transform() {
        def uris = classpath.files.collect {it.toURI().toURL()}
        def classloader = new URLClassLoader(uris as URL[], getClass().classLoader)
        def renderer = classloader.loadClass('org.xhtmlrenderer.pdf.ITextRenderer').newInstance()
        renderer.setDocument(sourceFile)
        renderer.layout()
        destFile.withOutputStream {
            renderer.createPDF(it)
        }
    }
}