import org.gradle.build.*
import org.gradle.api.internal.artifacts.publish.ArchivePublishArtifact

configurations {
    delegate.default.extendsFrom -= [runtime]
    delegate.default.extendsFrom publishCompile

    fatJarConfiguration {
        extendsFrom compile
        exclude group: "org.slf4j"
    }
}


dependencies {
    groovy libraries.groovy
    compile project(path: ':core', configuration: "publishCompileWithProjectJar")
    compile project(path: ':messaging', configuration: "publishCompileWithProjectJar")
    compile project(path: ':wrapper', configuration: "publishCompileWithProjectJar")
    compile project(path: ':baseServices', configuration: "publishCompileWithProjectJar")
    publishCompile libraries.slf4j_api

    // lots of integTest errors otherwise
    integTestRuntime project(':ide')
}

useTestFixtures()

integTestTasks.all {
    dependsOn({ rootProject.getTasksByName('publishLocalArchives', true) }, ':distributions:binZip')

    doFirst {
        systemProperties['org.gradle.integtest.toolingApiFromTestClasspath'] = 'true'
    }
}

daemonIntegTest {
    enabled = false //tooling integ tests use daemon anyway, don't rerun
}

task classpathManifest(type: ClasspathManifest, overwrite: true) {
    input = configurations.publishCompile
}

sourceSets {
    main.output.dir generatedResourcesDir, builtBy: classpathManifest
}

jar.enabled = false

task jarjarJar(type: JarJarJar) {
    doFirst {
        configurations.fatJarConfiguration.each {
            from(zipTree(it)) {
                exclude "META-INF/**"
                exclude "*classpath.properties"
            }
        }
    }
    from(sourceSets.main.output)
    rule('com.google.common.**', 'org.gradle.jarjar.com.google.common.@1')
    keep('org.gradle.**')
}

sourceSets {
    integTest {
        compileClasspath += test.output + jarjarJar.outputs.files
        runtimeClasspath += test.output + jarjarJar.outputs.files
    }
}

artifacts {
    delegate.default jarjarJar
    publishCompileWithProjectJar jarjarJar
    publishRuntime jarjarJar
}

configurations.all { artifacts.removeAll { it instanceof ArchivePublishArtifact && it.archiveTask == jar } }

eclipse {
    classpath {
        file.whenMerged { classpath ->
            //**TODO
            classpath.entries.removeAll { it.path.contains('src/test/groovy') }
            classpath.entries.removeAll { it.path.contains('src/integTest/groovy') }
        }
    }
}
