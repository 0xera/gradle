import org.gradle.build.*
import org.gradle.api.internal.artifacts.publish.ArchivePublishArtifact

dependencies {
    compile project(path: ':core', configuration: "publishCompileWithProjectJar")
    compile project(':messaging')
    compile project(':wrapper')
    compile project(':baseServices')
    publishCompile libraries.slf4j_api

    testFixturesCompile project(':baseServicesGroovy')
    testFixturesCompile project(':internalIntegTesting')
    testCompile libraries.groovy

    // lots of integTest errors otherwise
    integTestCompile project(':internalIntegTesting')
    integTestRuntime project(':ide')
    integTestRuntime project(':buildInit')
    integTestRuntime project(':buildComparison')
    integTestRuntime project(":ivy")
    integTestRuntime project(":maven")

    integTestRuntime project(":toolingApiBuilders")
}

useTestFixtures()
useTestFixtures(project: ":logging")

integTestTasks.all {
    dependsOn({ rootProject.getTasksByName('publishLocalArchives', true) }, ':distributions:binZip')
}

forkingIntegTest {
    if (isCiServer) {
        maxParallelForks = Math.min(2, rootProject.maxParallelForks)
    }
}

daemonIntegTest {
    enabled = false //tooling integ tests use daemon anyway, don't rerun
}

task shadedJar(type: ShadedJar) {
    sourceFiles = jar.inputs.files + files {(configurations.runtime - configurations.publishCompile).collect { zipTree(it) } }
    analysisFile = file("$buildDir/shaded-jar/analysis.txt")
    classesDir = file("$buildDir/shaded-jar/classes")
    jarFile = file("$buildDir/shaded-jar/gradle-tooling-api-shaded-${version}.jar")
    keepPackages = ["org.gradle.tooling"]
    unshadedPackages = ["org.gradle", "org.slf4j"]
    ignorePackages = ["org.gradle.tooling.provider.model"]
    shadowPackage = "org.gradle.impldep"
}

apply from: 'buildship.gradle'

task publishJar(type: Zip) {
    appendix = "bundle"
    destinationDir = jar.destinationDir
    extension = 'jar'
    dependsOn jar, shadedJar
    from zipTree(shadedJar.jarFile)
}

sourceJar {
    configurations.compile.allDependencies.withType(ProjectDependency).each {
        from it.dependencyProject.sourceSets.main.groovy.srcDirs
        from it.dependencyProject.sourceSets.main.java.srcDirs
    }
}

artifacts {
    publishCompileWithProjectJar publishJar
    publishRuntime file: publishJar.getArchivePath(), name: archivesBaseName, type: 'jar', builtBy: publishJar
}

eclipse {
    classpath {
        file.whenMerged { classpath ->
            //**TODO
            classpath.entries.removeAll { it.path.contains('src/test/groovy') }
            classpath.entries.removeAll { it.path.contains('src/integTest/groovy') }
        }
    }
}
