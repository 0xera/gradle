/*
 * Copyright 2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import data.Trie
import data.trieFrom
import elmish.elementById
import elmish.mountComponentAt
import elmish.tree.Tree
import elmish.tree.TreeView


fun main() {
    mountComponentAt(
        elementById("app"),
        HomePage,
        homePageModelFromJsModel(instantExecutionFailures)
    )
}


/**
 * External model defined in `instant-execution-failures.js`, a file generated by `InstantExecutionReport`.
 */
private
external val instantExecutionFailures: JsModel


private
typealias JsModel = Array<JsFailure>


private
external interface JsFailure {
    val trace: Array<String>
    val message: String
    val error: String?
}


private
fun homePageModelFromJsModel(failures: JsModel) = HomePage.Model(
    totalFailures = instantExecutionFailures.size,
    messageTree = treeModelFor(
        "Failures grouped by message",
        failures.asSequence().map { listOf(it.message) + it.trace.asList() }
    ),
    taskTree = treeModelFor(
        "Failures grouped by task",
        failures.asSequence().map { it.trace.asList().asReversed() }
    )
)


private
fun treeModelFor(
    label: String,
    sequence: Sequence<List<String>>
): TreeView.Model<String> = TreeView.Model(
    treeFromTrie(
        label,
        trieFrom(sequence)
    )
)


private
fun treeFromTrie(label: String, trie: Trie<String>): Tree<String> =
    Tree(label, subTreesFromTrie(trie))


private
fun subTreesFromTrie(trie: Trie<String>): List<Tree<String>> =
    trie.asSequence().sortedBy { it.key }.map {
        @Suppress("unchecked_cast")
        treeFromTrie(
            it.key,
            it.value as Trie<String>
        )
    }.toList()
