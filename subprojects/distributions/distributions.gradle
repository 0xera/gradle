/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This is a groovy project because we have int tests.
// Remove any pre-configured archives
configurations.all {
    artifacts.clear()
}
tasks.remove(jar)

tasks.withType(AbstractArchiveTask) {
    baseName "gradle"

    // The CI server looks for the distributions at this location
    destinationDir = rootProject.distsDir
    clean.delete archivePath
}

dependencies {
    testCompile libraries.groovy
}

configurations {
    dists
}

daemonIntegTest.enabled = false

evaluationDependsOn ":docs"

def runtimeConfig = rootProject.configurations.runtime

def externalModulesConfig = rootProject.configurations.gradleKotlin

task externalModules(type: Copy) {
    description 'Patches the classpath manifests of external modules such as gradle-script-kotlin to match the Gradle runtime configuration.'
    from externalModulesConfig
    into "$rootProject.buildDir/external/files"
    doLast {
        new ClasspathManifestPatcher(rootProject, runtimeConfig, externalModulesConfig)
            .writePatchedFilesTo(destinationDir)
    }
}

ext {
    zipRootFolder = "gradle-$version"

    binDistImage = copySpec {
        from('src/toplevel') {
            exclude 'media/**'
            expand(version: version)
        }
        from('src/toplevel') {
            include 'media/**'
        }
        from project(':docs').outputs.distDocs
        into('bin') {
            from { project(':launcher').startScripts.outputs.files }
            fileMode = 0755
        }
        into('lib') {
            from runtimeConfig - externalModulesConfig
            from externalModules
            into('plugins') {
                from rootProject.configurations.gradlePlugins - runtimeConfig
            }
        }
    }

    allDistImage = copySpec {
        with binDistImage
        groovyProjects.each { project ->
            into("src/$project.projectDir.name") {
                from project.sourceSets.main.allSource
            }
        }
        into('docs') {
            from project(':docs').outputs.docs
        }
        into('samples') {
            from project(':docs').outputs.samples
        }
    }
}

task allZip(type: Zip) {
    classifier = 'all'
    into(zipRootFolder) {
        with allDistImage
    }
}

task binZip(type: Zip) {
    classifier = 'bin'
    into(zipRootFolder) {
        with binDistImage
    }
}

task srcZip(type: Zip) {
    classifier = 'src'
    into(zipRootFolder) {
        from(rootProject.file('gradlew')) {
            fileMode = 0755
        }
        from(rootProject.projectDir) {
            def spec = delegate
            ['buildSrc', 'subprojects/*'].each {
                spec.include "$it/*.gradle"
                spec.include "$it/src/"
            }
            include 'config/'
            include 'gradle/'
            include 'src/'
            include '*.gradle'
            include 'wrapper/'
            include 'gradlew.bat'
            include 'version.txt'
        }
    }
}

task outputsZip(type: Zip) {
    archiveName "outputs.zip"
    from rootProject.createBuildReceipt
    ["all", "bin", "src"].each { from(tasks["${it}Zip"]) }
}

artifacts {
    dists allZip, binZip, srcZip
}

integTest {
    inputs.files allZip, binZip, srcZip
}

java9IntegTest {
    inputs.files allZip, binZip, srcZip
}

/**
 * Patches the classpath manifests of external modules such as gradle-script-kotlin
 * to match the dependencies of the Gradle runtime configuration.
 */
class ClasspathManifestPatcher {

    /**
     * The project.
     */
    Project project

    /**
     * The Gradle runtime configuration.
     */
    Configuration runtime

    /**
     * The configuration containing the external modules whose classpath manifests must be patched.
     */
    Configuration external

    ClasspathManifestPatcher(Project project, Configuration runtime, Configuration external) {
        this.project = project
        this.runtime = runtime
        this.external = external
    }

    def writePatchedFilesTo(File outputDir) {
        resolveModules().each { module ->
            def sourceFile = mainArtifactFileOf(module)
            def unpackDir = unpack(sourceFile)
            patchManifestOf(module, unpackDir)
            def outputFile = new File(outputDir, sourceFile.name)
            pack(unpackDir, outputFile)
        }
    }

    /**
     * Resolves each external module against the runtime configuration.
     */
    private Collection<ResolvedDependency> resolveModules() {
        def externalModules = external.dependencies.collect { it.name }.toSet()
        runtime
            .resolvedConfiguration
            .firstLevelModuleDependencies
            .findAll { it.moduleName in externalModules }
    }

    private static void patchManifestOf(ResolvedDependency module, File unpackDir) {
        def classpathManifestFile = new File(unpackDir, "${module.moduleName}-classpath.properties")
        def classpathManifest = loadProperties(classpathManifestFile)
        classpathManifest.runtime = runtimeManifestOf(module)
        classpathManifestFile.text = classpathManifest.collect { "${it.key}=${it.value}" }.join('\n')
    }

    private static String runtimeManifestOf(ResolvedDependency module) {
        def dependencies = module.allModuleArtifacts - module.moduleArtifacts
        dependencies.collect { it.file.name }.sort().join(',')
    }

    private File unpack(File file) {
        def unpackDir = project.file("${project.buildDir}/external/unpack/${file.name}")
        project.copy { spec ->
            spec.into(unpackDir)
            spec.from(project.zipTree(file))
        }
        unpackDir
    }

    private void pack(File baseDir, File destFile) {
        project.ant.zip(basedir: baseDir, destfile: destFile)
    }

    private static Properties loadProperties(File file) {
        def classpathManifest = new Properties()
        file.withInputStream { classpathManifest.load(it) }
        classpathManifest
    }

    private static File mainArtifactFileOf(ResolvedDependency module) {
        CollectionUtils.single(module.moduleArtifacts).file
    }
}
