plugins {
    id 'jvm-component'
    id 'java-lang'
}

<% if (repository) { %>
repositories {
    maven {
        url "${repository.getUri()}"
    }
    mavenCentral()
}
<% } %>

configurations {
    compile
    testCompile.extendsFrom compile
    testRuntime.extendsFrom testCompile
}

dependencies {
    <% if (dependencies) { dependencies.each { %>
    compile "${it.shortNotation()}"
    <% } } %>
    testCompile 'junit:junit:4.12'
}

model {
    components {
        main(JvmLibrarySpec)<% if (binding.hasVariable("generatedDependencies")) {
            def projectDependencies = generatedDependencies.get(subprojectNumber)
            if(projectDependencies) {
            %> {
            sources {
                java {
                    dependencies {<%
                        projectDependencies.each {
%>
                        project ':project${it}' library 'main'<%
                        } %>
                    }
                }
            }
        }
<% } } %>
        test(JvmLibrarySpec) {
            sources {
                java {
                    dependencies {
                        library 'main'
                    }
                }
            }
        }
    }
}

class ClasspathWiring extends RuleSource {
    static final def taskToConfigurationNameMapping = [compileMainJarMainJava: 'compile', compileTestJarTestJava: 'testCompile']

    @Mutate
    void wire(ModelMap<Task> tasks) {
        tasks.withType(JavaCompile) { javaCompileTask ->
            def configurationName = taskToConfigurationNameMapping.get(javaCompileTask.name)
            if (configurationName) {
                def configuration = javaCompileTask.project.configurations.getByName(configurationName)
                javaCompileTask.classpath += configuration
            }
        }
    }
}

apply plugin: ClasspathWiring
