import org.gradle.internal.hash.HashUtil
import org.gradle.performance.tasks.PerformanceTest

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'me.champeau.gradle:jmh-gradle-plugin:0.3.1'
    }
}

apply plugin: 'javascript-base'
apply plugin: 'me.champeau.gradle.jmh'
apply from: 'templates.gradle'

configurations {
    reports
}

repositories {
    javaScript.googleApis()
}

dependencies {
    reports "jquery:jquery.min:1.11.0@js"
    reports "flot:flot:0.8.1:min@js"

    compile libraries.groovy
    compile project(':baseServices')

    testFixturesCompile libraries.slf4j_api
    testFixturesCompile project(':internalIntegTesting')
    testFixturesCompile 'com.googlecode.jatl:jatl:0.2.2'
    testFixturesCompile 'org.eclipse.jgit:org.eclipse.jgit:3.0.0.201306101825-r'

    testFixturesRuntime 'com.h2database:h2:1.3.171'

    testCompile libraries.jsoup
}

useTestFixtures()
useTestFixtures(project: ':toolingApi', sourceSet: 'testFixtures')
useClassycle()

task reportResources(type: Copy) {
    from configurations.reports
    into "$generatedResourcesDir/org/gradle/reporting"
}
sourceSets.main.output.dir generatedResourcesDir, builtBy: reportResources

task report {
    def reportDir = new File(buildDir, "performance-tests/report")
    inputs.files sourceSets.testFixtures.runtimeClasspath
    inputs.dir file("${System.getProperty("user.home")}/.gradle-performance-test-data")
    outputs.dir reportDir

    doLast {
        def cl = new URLClassLoader(sourceSets.testFixtures.runtimeClasspath.collect { it.toURI().toURL() } as URL[], ClassLoader.systemClassLoader.parent)
        def store = cl.loadClass("org.gradle.performance.results.AllResultsStore").newInstance()
        try {
            def generator = cl.loadClass("org.gradle.performance.results.ReportGenerator").newInstance()
            generator.generate(store, reportDir)
        } finally {
            store.close()
        }
    }
}

task buildScanReport {
    def reportDir = new File(buildDir, "performance-tests/report")
    inputs.files sourceSets.testFixtures.runtimeClasspath
    outputs.dir reportDir

    doLast {
        def cl = new URLClassLoader(sourceSets.testFixtures.runtimeClasspath.collect { it.toURI().toURL() } as URL[], ClassLoader.systemClassLoader.parent)
        def store = cl.loadClass("org.gradle.performance.results.BuildScansResultsStore").newInstance()
        try {
            def generator = cl.loadClass("org.gradle.performance.results.ReportGenerator").newInstance()
            generator.generate(store, reportDir)
        } finally {
            store.close()
        }
    }
}

task performanceTest(type: PerformanceTest) {
    options {
        includeCategories 'org.gradle.performance.categories.GradleCorePerformanceTest'
    }
}

task performanceExperiments(type: PerformanceTest) {
    options {
        includeCategories 'org.gradle.performance.categories.Experiment'
    }
}

task performanceAdhocTest(type: PerformanceTest) {
    systemProperty "GRADLE_ADHOC_PERF_TESTS", "true"
    maxParallelForks = 1
}

task buildScanPluginPerformanceTest(type: PerformanceTest) {
    dependsOn largeJavaProjectWithBuildScanPlugin
    finalizedBy buildScanReport
    systemProperties += [incomingArtifactDir: "${rootDir}/incoming/"]

    options {
        includeCategories 'org.gradle.performance.categories.BuildScanPluginPerformanceTest'
    }
}

tasks.withType(PerformanceTest) {
    dependsOn prepareSamples
    dependsOn({ rootProject.getTasksByName('publishLocalArchives', true) }, ':distributions:binZip')
    finalizedBy report
    maxParallelForks = 1

    // Some performance builds generate a lot of output,
    // that is buffered until the test finishes via GradleExecuter.
    if(System.getProperty('sun.arch.data.model')?.indexOf('64') > -1) {
        maxHeapSize "8g"
    }
}

configure([performanceTest, performanceExperiments]) {
    if (project.hasProperty('org.gradle.performance.use_yourkit')) {
        testLogging.showStandardStreams = true
        systemProperties['org.gradle.performance.use_yourkit'] = '1'
        outputs.upToDateWhen { false }
    }
    if (project.hasProperty('org.gradle.performance.heapdump')) {
        systemProperties['org.gradle.performance.heapdump'] = '1'
    }
    if (project.hasProperty('org.gradle.performance.hotspotlog')) {
        systemProperties['org.gradle.performance.hotspotlog'] = '1'
    }
    if (project.hasProperty('performanceTest.verbose')) {
        testLogging.showStandardStreams = true
    }
}

configure([integTest, java9IntegTest]) {
    options {
        excludeCategories 'org.gradle.performance.categories.PerformanceTest'
    }
}

jmh {
    jmhVersion = '1.12'
    include = 'org\\.gradle\\.experiments\\.reflection\\..*'
    includeTests = false
    warmupIterations = 10
    threads = 2
    synchronizeIterations = false
    fork = 4
}

task checkNoIdenticalBuildFiles {
    doLast {
        def files = [:].withDefault { [] }
        buildDir.eachFileRecurse {
            if (it.name.endsWith('.gradle')) {
                def hash = HashUtil.createHash(it, 'sha1').asHexString()
                files[hash] << it
            }
        }
        files.each { hash, candidates ->
            if (candidates.size()>1) {
                println "Duplicate build files found for hash '$hash' : $candidates"
            }
        }
    }
}
