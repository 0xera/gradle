/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.gradle.api.plugins.migration.gradle.internal;

import org.gradle.api.Transformer;
import org.gradle.api.internal.filestore.FileStore;
import org.gradle.api.internal.filestore.FileStoreEntry;
import org.gradle.api.plugins.migration.model.outcome.internal.BuildOutcome;
import org.gradle.api.plugins.migration.model.outcome.internal.archive.GeneratedArchiveBuildOutcome;
import org.gradle.api.plugins.migration.model.outcome.internal.unknown.UnknownBuildOutcome;
import org.gradle.tooling.internal.provider.FileOutcomeIdentifier;
import org.gradle.tooling.model.internal.outcomes.FileBuildOutcome;
import org.gradle.tooling.model.internal.outcomes.ProjectOutcomes;

import java.io.File;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Transforms from the Tooling API model classes to the more “native” classes in this space.
 */
public class GradleBuildOutcomeSetTransformer implements Transformer<Set<BuildOutcome>, ProjectOutcomes> {

    private final FileStore<String> fileStore;

    private final List<String> zipArchiveTypes = Arrays.asList(
            FileOutcomeIdentifier.JAR_ARTIFACT.getTypeIdentifier(),
            FileOutcomeIdentifier.EAR_ARTIFACT.getTypeIdentifier(),
            FileOutcomeIdentifier.WAR_ARTIFACT.getTypeIdentifier(),
            FileOutcomeIdentifier.ZIP_ARTIFACT.getTypeIdentifier()
    );

    public GradleBuildOutcomeSetTransformer(FileStore<String> fileStore) {
        this.fileStore = fileStore;
    }

    public Set<BuildOutcome> transform(ProjectOutcomes projectOutcomes) {
        Set<BuildOutcome> keyedOutcomes = new HashSet<BuildOutcome>();
        addBuildOutcomes(projectOutcomes, keyedOutcomes);
        return keyedOutcomes;
    }

    private void addBuildOutcomes(ProjectOutcomes projectOutcomes, Set<BuildOutcome> buildOutcomes) {
        for (org.gradle.tooling.model.internal.outcomes.BuildOutcome outcome : projectOutcomes.getOutcomes()) {
            if (outcome instanceof FileBuildOutcome) {
                addFileBuildOutcome((FileBuildOutcome) outcome, buildOutcomes);
            } else {
                new UnknownBuildOutcome(outcome.getTaskPath(), "Unknown Build Outcome");
            }
        }

        for (ProjectOutcomes child : projectOutcomes.getChildren()) {
            addBuildOutcomes(child, buildOutcomes);
        }
    }

    private void addFileBuildOutcome(FileBuildOutcome outcome, Set<BuildOutcome> translatedOutcomes) {
        if (zipArchiveTypes.contains(outcome.getTypeIdentifier())) {
            File file = outcome.getFile();
            String filestoreDestination = String.format("%s/%s", outcome.getTaskPath(), file.getName());
            FileStoreEntry fileStoreEntry = fileStore.move(filestoreDestination, file);
            File storedFile = fileStoreEntry.getFile();
            BuildOutcome buildOutcome = new GeneratedArchiveBuildOutcome(outcome.getTaskPath(), "Archive generated by Gradle task", storedFile);
            translatedOutcomes.add(buildOutcome);
        } else {
            translatedOutcomes.add(new UnknownBuildOutcome(outcome.getTaskPath(), "Unknown Build Outcome"));
        }
    }

}
