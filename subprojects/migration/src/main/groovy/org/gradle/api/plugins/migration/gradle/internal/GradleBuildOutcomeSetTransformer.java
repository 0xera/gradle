/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.gradle.api.plugins.migration.gradle.internal;

import org.gradle.api.Transformer;
import org.gradle.api.internal.filestore.FileStore;
import org.gradle.api.internal.filestore.FileStoreEntry;
import org.gradle.api.plugins.migration.model.outcome.BuildOutcome;
import org.gradle.api.plugins.migration.model.outcome.internal.archive.GeneratedArchiveBuildOutcome;
import org.gradle.tooling.model.internal.migration.Archive;
import org.gradle.tooling.model.internal.migration.ProjectOutput;

import java.io.File;
import java.util.HashSet;
import java.util.Set;

public class GradleBuildOutcomeSetTransformer implements Transformer<Set<BuildOutcome>, ProjectOutput> {

    private final FileStore<String> fileStore;

    public GradleBuildOutcomeSetTransformer(FileStore<String> fileStore) {
        this.fileStore = fileStore;
    }

    public Set<BuildOutcome> transform(ProjectOutput projectOutput) {
        Set<BuildOutcome> keyedOutcomes = new HashSet<BuildOutcome>();

        // TODO - need multiple strategies here for different kinds of outcomes

        addArchivesByTaskPath(projectOutput, keyedOutcomes);

        return keyedOutcomes;
    }

    private void addArchivesByTaskPath(ProjectOutput output, Set<BuildOutcome> outcomes) {
        for (Archive archive : output.getArchives()) {
            File archiveFile = archive.getFile();
            FileStoreEntry fileStoreEntry = fileStore.move(String.format("%s/%s", archive.getTaskPath(), archiveFile.getName()), archiveFile);
            File storedFile = fileStoreEntry.getFile();
            BuildOutcome buildOutcome = new GeneratedArchiveBuildOutcome(archive.getTaskPath(), "Archive generated by Gradle task", storedFile);
            outcomes.add(buildOutcome);
        }

        for (ProjectOutput child : output.getChildren()) {
            addArchivesByTaskPath(child, outcomes);
        }
    }

}
