/*
 * Copyright 2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.gradle.internal.classpath.types;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.gradle.internal.lazy.Lazy;

import java.io.IOException;
import java.io.InputStream;
import java.io.UncheckedIOException;
import java.util.Collections;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

/**
 * Provides instrumented super types for a given type for core Gradle types.
 *
 * Note: It returns only instrumented types that are instrumented with {@link org.gradle.internal.instrumentation.api.annotations.InterceptInherited}.
 */
class GradleCoreInstrumentingTypeRegistry implements InstrumentingTypeRegistry {

    /**
     * Generated by gradlebuild.distributions plugin
     */
    private static final String INSTRUMENTED_SUPER_TYPES_FILE = "instrumented-super-types/instrumented-super-types.properties";

    private static final Lazy<Map<String, Set<String>>> INSTRUMENTED_SUPER_TYPES = Lazy.locking().of(GradleCoreInstrumentingTypeRegistry::loadInstrumentedSuperTypes);

    @Override
    public Set<String> getInstrumentedSuperTypes(String type) {
        return INSTRUMENTED_SUPER_TYPES.get().getOrDefault(type, Collections.emptySet());
    }

    @Override
    public boolean isEmpty() {
        return INSTRUMENTED_SUPER_TYPES.get().isEmpty();
    }

    private static Map<String, Set<String>> loadInstrumentedSuperTypes() {
        try (InputStream stream = GradleCoreInstrumentingTypeRegistry.class.getResourceAsStream(INSTRUMENTED_SUPER_TYPES_FILE)) {
            Properties properties = new Properties();
            properties.load(stream);
            ImmutableMap.Builder<String, Set<String>> builder = ImmutableMap.builder();
            properties.forEach((k, v) -> builder.put((String) k, ImmutableSet.copyOf(v.toString().split(","))));
            return builder.build();
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }
    }
}
