
/*
 * Copyright 2010 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.asciidoctor.gradle.AsciidoctorTask
import org.gradle.gradlebuild.unittestandcompile.ModuleType
import org.gradle.samples.Sample

plugins {
    id 'java-library'
    id 'javascript-base'
    // TODO: Apply asciidoctor in documentation plugin instead.
    id 'org.asciidoctor.convert'
    id 'gradlebuild.documentation'
    id 'org.gradle.samples' version "0.15.25"
}

repositories {
    javaScript.googleApis()
}

configurations {
    gradleSamplesElements {
        visible = false
        canBeResolved = false
        canBeConsumed = true
        attributes.attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, "docs"))
        attributes.attribute(Attribute.of("type", String), "samples")
    }
    gradleFullDocsElements {
        visible = false
        canBeResolved = false
        canBeConsumed = true
        attributes.attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, "docs"))
        attributes.attribute(Attribute.of("type", String), "full-docs")
    }
    gradleGettingStartedElements {
        visible = false
        canBeResolved = false
        canBeConsumed = true
        attributes.attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, "docs"))
        attributes.attribute(Attribute.of("type", String), "getting-started")
    }

    gradleApiRuntime {
        visible = false
        canBeResolved = true
        canBeConsumed = false
        attributes.attribute(Usage.USAGE_ATTRIBUTE, project.objects.named(Usage, Usage.JAVA_RUNTIME))
        attributes.attribute(Attribute.of("org.gradle.api", String), "runtime")
    }
}

dependencies {
    asciidoctor "org.gradle:docs-asciidoctor-extensions:0.4.0"
    // TODO: Why isn't this using the output instead?
    asciidoctor project.files("src/main/resources")

    userGuideTask 'xalan:xalan:2.7.1'
    userGuideTask 'xerces:xercesImpl:2.11.0'
    userGuideTask 'xhtmlrenderer:xhtmlrenderer:R8rc1'
    userGuideTask 'itext:itext:2.0.8'
    userGuideTask 'xslthl:xslthl:2.0.1'

    userGuideStyleSheets 'docbook:docbook-xsl:1.75.2@zip'

    jquery "jquery:jquery.min:1.8.0@js"

    testImplementation project(":baseServices")
    testImplementation project(":core")
    testImplementation testLibraries.jsoup
    testImplementation("org.gebish:geb-spock:2.2")
    testImplementation('org.seleniumhq.selenium:selenium-htmlunit-driver:2.42.2')
    testImplementation libraries.commons_httpclient.coordinates
    testImplementation "org.apache.httpcomponents:httpmime:${libraries.commons_httpclient.version}"

    gradleApiRuntime project(":")
}

gradlebuildJava {
    moduleType = ModuleType.CORE
}

asciidoctorj {
    version = '1.5.8.1'
    noDefaultRepositories = true
}

gradleDocumentation {
    javadocs {
        javaApi = project.uri("https://docs.oracle.com/javase/8/docs/api")
        groovyApi = project.uri("https://docs.groovy-lang.org/docs/groovy-${groovyVersion}/html/gapi")
        mavenApi = project.uri("https://maven.apache.org/ref/${libraries.maven3.version}/maven-model/apidocs")
    }
}

// Sample stuff:
def samplesSrcDir = file('src/samples')
def asciidoctorTaskConfigurator = { AsciidoctorTask task ->
    task.attributes stylesdir: file('src/docs/css/').absolutePath,
            stylesheet: 'manual.css',
            nofooter: true,
            sectanchors: true,
            sectlinks: true,
            linkattrs: true
}


tasks.withType(AsciidoctorTask).configureEach {
    if (name == 'asciidocSampleIndex') {
        asciidoctorTaskConfigurator(it)
    }
}

samples.configureEach { sample ->
    sample.asciidoctorTask.configure(asciidoctorTaskConfigurator)

    sample.asciidoctorTask.configure { task ->
        task.attributes.put('docinfodir', "${buildDir}/tmp/${task.name}".toString())
        task.attributes.put('docinfo', 'private-head')
        task.attributes.put('outfilesuffix', '.html')
        task.attributes.put('userManualPath', '../../userguide')
        doFirst {
            new File(temporaryDir, 'README-docinfo.html').text = 
                """<meta name="adoc-src-path" content="/../../samples${sample.readMeFile.get().asFile.path - samplesSrcDir.path}">"""
        }
    }

    sample.gradleVersion = project.provider { project.version.toString() }
    sample.permalink = org.gradle.util.GUtil.toWords(sample.name, '_' as char).toLowerCase()
}

def templateDir = file("src/samples/templates")
def installSourceFromTemplate(Sample sample, Closure action) {
    def installTask = tasks.register("install${sample.name.capitalize()}SourceFromTemplates", Sync, action)
    installTask.configure {
        into(temporaryDir) // TODO: Validate this
        destinationDir = temporaryDir
    }
    return project.files(installTask).builtBy(installTask) // TODO: Validate this
}

samples {
    androidApplication {
        sampleDirectory = file("src/samples/android-application")
        description = "Demonstrate how to build an Android application"
        def sourceFiles = installSourceFromTemplate(it) {
            from("$templateDir/java-android-application")
        }
        archiveContent.from(sourceFiles)
        exemplar.source {
            from(sourceFiles) { into("groovy") }
            from(sourceFiles) { into("kotlin") }
        }
    }
    springBootWebApplication {
        sampleDirectory = file("src/samples/spring-boot-web-application")
        description = "Demonstrate how to build a Spring Boot Web application"
        def sourceFiles = installSourceFromTemplate(it) {
            from("$templateDir/spring-boot-web-application")
        }
        archiveContent.from sourceFiles
        exemplar.source {
            from(sourceFiles) { into('groovy') }
            from(sourceFiles) { into('kotlin') }
        }
    }

    jvmComponentsWithAdditionalTestTypes {
        sampleDirectory = file("src/samples/jvm-components-with-additional-test-types")
        displayName = "JVM Components With Additional Test Types"
        description = "Demonstrate how to add additional test types to JVM components - e.g. integration tests"
        def sourceFiles = installSourceFromTemplate(it) {
            from("$templateDir/java-application") { into("application") }
            from("$templateDir/java-junit4-test-for-application") { into("application") }
            from("$templateDir/java-junit4-integration-test-for-application") { into("application") }
            from("$templateDir/java-list-library") { into("library") }
            from("$templateDir/java-junit4-test-for-list-library") { into("library") }
            from("$templateDir/java-junit4-integration-test-for-list-library") { into("library") }
            from("$templateDir/java-utilities-library") { into("library") }
        }
        archiveContent.from sourceFiles
        exemplar.source {
            from(sourceFiles) { into('groovy') }
            from(sourceFiles) { into('kotlin') }
        }
    }

    jvmMultiProjectBuild {
        sampleDirectory = file("src/samples/jvm-multi-project-build")
        description = "Demonstrate how transitive dependencies works as part of a multi-project build"
        def sourceFiles = installSourceFromTemplate(it) {
            from("$templateDir/java-application") { into("application") }
            from("$templateDir/java-list-library") { into("list") }
            from("$templateDir/java-utilities-library") { into("utilities") }
        }
        archiveContent.from sourceFiles
        exemplar.source {
            from(sourceFiles) { into('groovy') }
            from(sourceFiles) { into('kotlin') }
        }
    }

    javaApplication {
        sampleDirectory = file("src/samples/java/application")
        description = "Demonstrate how to build a Java application"

        def sourceFiles = installSourceFromTemplate(it) {
            from("$templateDir/java-application")
            from("$templateDir/java-list-library")
            from("$templateDir/java-utilities-library")
        }
        archiveContent.from sourceFiles
        exemplar.source {
            from(sourceFiles) { into('groovy') }
            from(sourceFiles) { into('kotlin') }
        }
    }
    javaLibrary {
        sampleDirectory = file("src/samples/java/library")
        description = "Demonstrate how to build a Java library"
        def sourceFiles = installSourceFromTemplate(it) {
            from("$templateDir/java-list-library")
            from("$templateDir/java-utilities-library")
        }
        archiveContent.from sourceFiles
        exemplar.source {
            from(sourceFiles) { into('groovy') }
            from(sourceFiles) { into('kotlin') }
        }
    }
    javaComponentsWithSpockTests {
        sampleDirectory = file("src/samples/java/components-with-spock-tests")
        description = "Demonstrate how to test Java components using Spock framework"
        def sourceFiles = installSourceFromTemplate(it) {
            from("$templateDir/java-application") { into("application") }
            from("$templateDir/groovy-spock-test-for-application") { into("application") }
            from("$templateDir/java-list-library") { into("library") }
            from("$templateDir/groovy-spock-test-for-list-library") { into("library") }
            from("$templateDir/java-utilities-library") { into("library") }
        }
        archiveContent.from sourceFiles
        exemplar.source {
            from(sourceFiles) { into('groovy') }
            from(sourceFiles) { into('kotlin') }
        }
    }
    javaComponentsWithJUnit4Tests {
        sampleDirectory = file("src/samples/java/components-with-junit-4-tests")
        displayName = "Java Components With JUnit 4 Tests"
        permalink = "java_components_with_junit4_tests"
        description = "Demonstrate how to test Java components using JUnit 4"
        def sourceFiles = installSourceFromTemplate(it) {
            from("$templateDir/java-application") { into("application") }
            from("$templateDir/java-junit4-test-for-application") { into("application") }
            from("$templateDir/java-list-library") { into("library") }
            from("$templateDir/java-junit4-test-for-list-library") { into("library") }
            from("$templateDir/java-utilities-library") { into("library") }
        }
        archiveContent.from sourceFiles
        exemplar.source {
            from(sourceFiles) { into('groovy') }
            from(sourceFiles) { into('kotlin') }
        }
    }
    javaLibraryPublishing {
        sampleDirectory = file("src/samples/java/library-publishing")
        description = "Demonstrate how to publish a Java library to a binary repository"
        def sourceFiles = installSourceFromTemplate(it) {
            from("$templateDir/java-list-library")
            from("$templateDir/java-utilities-library")
        }
        archiveContent.from sourceFiles
        exemplar.source {
            from(sourceFiles) { into('groovy') }
            from(sourceFiles) { into('kotlin') }
        }
    }

    groovyApplication {
        sampleDirectory = file("src/samples/groovy/application")
        description = "Demonstrate how to build a Groovy application"
        def sourceFiles = installSourceFromTemplate(it) {
            from("$templateDir/groovy-application")
            from("$templateDir/groovy-list-library")
            from("$templateDir/groovy-utilities-library")
        }
        archiveContent.from sourceFiles
        exemplar.source {
            from(sourceFiles) { into('groovy') }
            from(sourceFiles) { into('kotlin') }
        }
    }
    groovyLibrary {
        sampleDirectory = file("src/samples/groovy/library")
        description = "Demonstrate how to build a Groovy library"
        def sourceFiles = installSourceFromTemplate(it) {
            from("$templateDir/groovy-list-library")
            from("$templateDir/groovy-utilities-library")
        }
        archiveContent.from sourceFiles
        exemplar.source {
            from(sourceFiles) { into('groovy') }
            from(sourceFiles) { into('kotlin') }
        }
    }
    groovyTransitiveDependencies {
        sampleDirectory = file("src/samples/groovy/transitive-dependencies")
        description = "Demonstrate how transitive dependencies work with Groovy projects"
        def sourceFiles = installSourceFromTemplate(it) {
            from("$templateDir/groovy-application") { into("application") }
            from("$templateDir/groovy-list-library") { into("list") }
            from("$templateDir/groovy-utilities-library") { into("utilities") }
        }
        archiveContent.from sourceFiles
        exemplar.source {
            from(sourceFiles) { into('groovy') }
            from(sourceFiles) { into('kotlin') }
        }
    }
    groovyComponentsWithSpockTests {
        sampleDirectory = file("src/samples/groovy/components-with-spock-tests")
        description = "Demonstrate how to test Groovy components using Spock framework"
        def sourceFiles = installSourceFromTemplate(it) {
            from("$templateDir/groovy-application") { into("application") }
            from("$templateDir/groovy-spock-test-for-application") { into("application") }
            from("$templateDir/groovy-list-library") { into("library") }
            from("$templateDir/groovy-spock-test-for-list-library") { into("library") }
            from("$templateDir/groovy-utilities-library") { into("library") }
        }
        archiveContent.from sourceFiles
        exemplar.source {
            from(sourceFiles) { into('groovy') }
            from(sourceFiles) { into('kotlin') }
        }
    }
    groovyLibraryPublishing {
        sampleDirectory = file("src/samples/groovy/library-publishing")
        description = "Demonstrate how to publish a Groovy library to a binary repository"
        def sourceFiles = installSourceFromTemplate(it) {
            from("$templateDir/groovy-list-library")
            from("$templateDir/groovy-utilities-library")
        }
        archiveContent.from sourceFiles
        exemplar.source {
            from(sourceFiles) { into('groovy') }
            from(sourceFiles) { into('kotlin') }
        }
    }
}

tasks.register("publishedSamples") {
    dependsOn "asciidocSampleIndex"
    dependsOn {
        project.extensions.samples.collect { "assemble${it.name.capitalize()}Sample" }
    }
}


// Publications for the docs subproject:

configurations {
    gradleSamplesElements {
        // TODO: This is an implementation detail of the samples plugin.
        outgoing.artifact(new File(buildDir, "gradle-samples")) {
            builtBy 'publishedSamples'
        }
    }
    gradleFullDocsElements {
        // TODO: This breaks the provider
        outgoing.artifact(project.gradleDocumentation.getDocumentationRenderedRoot().get().asFile) {
            builtBy 'docs'
        }
    }
    gradleGettingStartedElements {
        outgoing.artifact(file("src/docs/README"))
    }
}
