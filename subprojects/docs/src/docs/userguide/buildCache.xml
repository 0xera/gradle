<!--
  ~ Copyright 2016 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<chapter id='build_cache'>
    <note>
        <para>
            This feature is a work in progress.
        </para>
    </note>
    <note>
        <para>
            The build cache feature described here is different from the <ulink url="http://tools.android.com/tech-docs/build-cache">Android plugin build cache</ulink>.
        </para>
    </note>
    <title>Build Cache</title>
    <section id="sec:build_cache_intro">
        <title>Overview</title>
        <para>
            Build caching is a new kind of cache mechanism that aims to save time by reusing outputs produced by other builds.
        </para>
    </section>
    <section id="sec:build_cache_enable">
        <title>Enable the Build Cache</title>
        <para>
            By default, the <firstterm>build cache</firstterm> is not enabled. You can enable the build cache in a couple of ways:
            <varlistentry>
                <term>Run with <literal>--build-cache</literal> on the command-line.</term>
                <listitem>
                    <para>
                        Gradle will use the build cache for this build only.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Put <literal>org.gradle.caching=true</literal> in your <filename>gradle.properties</filename>.</term>
                <listitem>
                    <para>
                        Gradle will try to reuse outputs from previous builds for all builds, unless explicitly disabled with <literal>--no-build-cache</literal>.
                    </para>
                </listitem>
            </varlistentry>
        </para>
    </section>
    <section id="sec:build_cache_configure">
        <title>Configure the Build Cache</title>
        <para>
            You can configure the build cache by using the <apilink class='org.gradle.api.initialization.Settings' method="buildCache(org.gradle.api.Action)"/> block in <literal>settings.gradle</literal>.
            <para>
                Gradle supports a <literal>local</literal> and <literal>remote</literal> build cache that can be configured separately.
                When both build caches are enabled, Gradle tries to load build outputs from the local build cache first and then tries the remote build cache if no build outputs are found.
                Gradle pushes build outputs to any build cache that is enabled and has <apilink class='org.gradle.caching.configuration.BuildCache' method="isPush()" /> set to <literal>true</literal>.
            </para>
            <para>
            By default, the local build cache has push enabled, and the remote build cache has push disabled.
            </para>
            <para>
                The local build cache is pre-configured to be a <apilink class='org.gradle.caching.local.DirectoryBuildCache'/> and enabled by default.
                The remote build cache can be configured by specifying the type of build cache to use (<apilink class='org.gradle.caching.configuration.BuildCacheConfiguration' method="local(java.lang.Class)"/>).
                Custom remote build cache types can be registered via <apilink class='org.gradle.caching.configuration.BuildCacheConfiguration' method="registerBuildCacheService(java.lang.Class, java.lang.Class)"/>.
            </para>
            <para>
                Gradle ships with a built-in remote build cache implementation that works via HTTP and can be configured as follows in a build's <literal>settings.gradle</literal>.
                Note that by using this configuration the local build will be used for storing build outputs while the local and the remote build cache will be used for retrieving build outputs.
            </para>
            <sample id="httpBuildCache" dir="buildCache/http-build-cache" title="Pull from HttpBuildCache">
                <sourcefile file="settings.gradle" snippet="http-build-cache"/>
            </sample>
            <para>
                In order to populate the remote build cache, pushing needs to be enabled and the local build cache can be disabled as shown in the following sample.
            </para>
            <sample id="pushToRemoteBuildCache" dir="buildCache/push-to-remote" title="Enable pushing to remote build cache">
                <sourcefile file="settings.gradle" snippet="push-to-remote"/>
            </sample>
            <para>
                You can configure the directory the <apilink class='org.gradle.caching.local.DirectoryBuildCache'/> uses to store the build outputs and
                the credentials the <apilink class='org.gradle.caching.http.HttpBuildCache'/> uses to access the build cache server as shown in the following example.
                <sample id="directoryAndHttpBuildCacheConfiguration" dir="buildCache/configure-built-in-caches" title="Configure built-in build caches">
                    <sourcefile file="settings.gradle" snippet="configure-built-in-build-caches"/>
                </sample>
            </para>
        </para>
    </section>
    <section id="sec:task_output_caching">
        <title>Task Output Caching</title>
        <para>
            Beyond incremental builds described in <xref linkend="sec:up_to_date_checks"/>, Gradle can save time by reusing outputs from previous executions of a task by matching inputs to the task.
            Task outputs can be reused between builds on one computer or even between builds running on different computers via a build cache.
        </para>
        <note>
            <para>
                This feature is a work in progress and is automatically enabled when you enable the build cache, see <xref linkend="sec:build_cache_enable"/>.
            </para>
        </note>
        <section id="sec:task_output_caching_faster">
            <title>Making builds faster</title>
            <para>
                Since a task describes all of its inputs and outputs, Gradle can compute a <firstterm>build cache key</firstterm> that uniquely defines the task's outputs based on its inputs.
                That build cache key is used to request previous outputs from a build cache or push new outputs to the build cache. If the previous build is already populated by someone else, e.g. your
                <firstterm>continuous integration</firstterm> server or other developers, you can avoid executing most tasks locally.
            </para>
            <para>
                The following inputs contribute to the build cache key for a task in the same way as they do for <link linked="sec:how_does_it_work">up to date checks</link>:
            </para>
            <itemizedlist>
                <listitem>The task type and its classpath</listitem>
                <listitem>The names of the output properties</listitem>
                <listitem>The names and values of properties annotated as described in <xref linkend="sec:task_input_output_annotations"/></listitem>
                <listitem>The names and values of properties added by the DSL via <apilink class="org.gradle.api.tasks.TaskInputs"/></listitem>
                <listitem>The classpath of the Gradle distribution, buildSrc and plugins</listitem>
                <listitem>The content of the build script when it affects execution of the task</listitem>
            </itemizedlist>
            <para>
                Task types need to opt-in to task output caching using the <literal>@<apilink class="org.gradle.api.tasks.CacheableTask"/></literal> annotation.
                Many built-in Gradle task types are cacheable, but custom task types are <emphasis>not</emphasis> cacheable by default.
            </para>
        </section>
        <section id="sec:task_outputs_known_issues">
            <title>Known Issues</title>
            <para>
                This feature currently has known issues that may impact the performance, correctness and usability of your build when using the build cache.
            </para>
            <itemizedlist>
                <listitem></listitem>
            </itemizedlist>
        </section>
    </section>
</chapter>
