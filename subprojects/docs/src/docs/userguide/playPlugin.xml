<!--
  ~ Copyright 2015 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<chapter id='play_plugin' xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>The Play Plugin</title>
    <note>
        <para>
            The Gradle support for building Play applications is currently <link linkend="feature_lifecycle">incubating</link>. Please be aware that the DSL and other configuration may change in later Gradle versions.
        </para>
    </note>

    <para>
        <ulink url="https://www.playframework.com/">Play</ulink> is a modern web application framework.
        The Play plugin adds support for building, testing and running Play applications with Gradle.
    </para>

    <section>
        <title>Usage</title>
        <para>To use the Play plugin, include the following in your build script to apply the <literal>play</literal> plugin and add the Typesafe repositories:</para>
        <sample id="usePlayPlugin" dir="play/basic" title="Using the Play plugin">
            <sourcefile file="build.gradle" snippet="use-plugin"/>
        </sample>
    </section>

    <section>
        <title>Limitations</title>
        <para>The Play plugin currently has a few limitations.</para>
        <itemizedlist>
            <listitem>
                <para>
                    Support is limited to Play 2.2.x and 2.3.x applications.
                    Future Gradle versions will add support for Play 2.4.x and 3.0.x.
                </para>
            </listitem>
            <listitem>
                <para>
                    A project may only define a single Play application.
                    A multi-project build can have as many Play applications as desired.
                </para>
            </listitem>
            <listitem>
                <para>
                    Play applications can only target a single “platform” (combination of Play, Scala and Java version) at this time.
                    This limitation may be lifted in future Gradle versions.
                </para>
            </listitem>
        </itemizedlist>
    </section>

    <section>
        <title>Software Component Model</title>

        <para>
            The Play plugin uses a <link linkend="new_model">software component model</link> to describe how to build a Play application.
            Components are abstract software products that are built into “binary” forms.  Most configuration will be done to the software component.
            A Play application is represented by a <apilink class="org.gradle.play.PlayApplicationSpec"/> component type.  The plugin automatically creates a single <apilink class="org.gradle.play.PlayApplicationBinarySpec"/> when it is applied.
            A project can only have one PlayApplicationSpec component defined at this time.
        </para>

        <figure>
            <title>Play plugin - software component model</title>
            <imageobject>
                <imagedata fileref="img/playPluginModel.png"/>
            </imageobject>
        </figure>

        <para>
            A Play application consists of several source sets, which are just logical groupings of files of a particular type.
            The Play plugin defines source sets on a PlayApplicationSpec for Java, Scala, JavaScript, and non-source code.
            Additional source sets can be configured in the build script and in other plugins.
            The PlayApplicationBinarySpec is the output of all of these source sets.
        </para>
        <para>
            A Play application requires a particular version of Play, Scala and Java to build and run.
            The Play plugin models this requirement as a <apilink class="org.gradle.play.platform.PlayPlatform"/>.  A PlayPlatform consists of a Play version, Scala Platform and Java Platform.
            Gradle assumes a default version of Play, Scala and Java if none are specified.
            Only a single PlayPlatform can be specified for a given PlayApplicationSpec component.
        </para>
        <para>
            A PlayApplicationBinarySpec is created for a given PlayPlatform to represent the binary form.
            The Play plugin will use configuration from the PlayApplicationSpec to select the appropriate version of the Scala, Twirl and Routes compilers to create the Play application binary.
            In the end, the transformation from source code to binary is still expressed as a list of tasks with dependencies.
            You can inspect the list of tasks with <literal>gradle tasks</literal>, but the software component model also provides additional reports for understanding the build.
        </para>
        <para>Learn more about the <link linkend="new_model">Software Component Model</link> and how it fits into Gradle's future.</para>
    </section>

    <section>
        <title>Project Layout</title>
        <para>The Play plugin follows the typical Play application layout.  You can configure <link linkend="">additional directories or change the defaults.</link></para>
        <screen>
            ├── app                 <lineannotation>→ Application source code.</lineannotation>
            │   ├── assets          <lineannotation>→ Assets that require compilation.</lineannotation>
            │   │   ├── javascripts <lineannotation>→ Typically CoffeeScript source code.</lineannotation>
            │   │   └── stylesheets <lineannotation>→ Typically LESS source code.</lineannotation>
            │   ├── controllers     <lineannotation>→ Application controller source code.</lineannotation>
            │   ├── models          <lineannotation>→ Application business source code.</lineannotation>
            │   └── views           <lineannotation>→ Application UI templates.</lineannotation>
            ├── build.gradle        <lineannotation>→ Your project's build script.</lineannotation>
            ├── conf                <lineannotation>→ Main application configuration file and routes files.</lineannotation>
            ├── public              <lineannotation>→ Public assets.</lineannotation>
            │   ├── images          <lineannotation>→ Application image files.</lineannotation>
            │   ├── javascripts     <lineannotation>→ Typically JavaScript source code.</lineannotation>
            │   └── stylesheets     <lineannotation>→ Typically CSS source code.</lineannotation>
            └── test                <lineannotation>→ Test source code.</lineannotation>
        </screen>
    </section>

    <section>
        <title>Tasks</title>

        <para>The Play plugin also adds a number of tasks which form a lifecycle for the project:</para>

        <table id="play_lifecycle_tasks">
            <title>Play plugin - lifecycle tasks</title>
            <thead>
                <tr>
                    <td>Task name</td>
                    <td>Depends on</td>
                    <td>Type</td>
                    <td>Description</td>
                </tr>
            </thead>
            <tr>
                <td>
                    <literal>playBinary</literal>
                </td>
                <td>
                    All compile tasks for source sets added to the Play application.
                </td>
                <td><apilink class="org.gradle.api.Task"/></td>
                <td>Performs a build of just the Play application.</td>
            </tr>
            <tr>
                <td>
                    <literal>dist</literal>
                </td>
                <td>
                    <literal>createPlayBinaryDist</literal>
                </td>
                <td><apilink class="org.gradle.api.Task"/></td>
                <td>Assembles all Play distributions.</td>
            </tr>
            <tr>
                <td>
                    <literal>stage</literal>
                </td>
                <td>
                    <literal>stagePlayBinaryDist</literal>
                </td>
                <td><apilink class="org.gradle.api.Task"/></td>
                <td>Stages all Play distributions.</td>
            </tr>
        </table>
        <para>The plugin also provides tasks for running and testing your Play application:</para>
        <table>
            <title>Play plugin - running and testing tasks</title>
            <thead>
                <tr>
                    <td>Task name</td>
                    <td>Depends on</td>
                    <td>Type</td>
                    <td>Description</td>
                </tr>
            </thead>
            <tr>
                <td>
                    <literal>runPlayBinary</literal>
                </td>
                <td>
                    <literal>playBinary</literal> to build Play application.
                </td>
                <td><apilink class="org.gradle.play.tasks.PlayRun"/></td>
                <td>Runs the Play application for local development.</td>
            </tr>
            <tr>
                <td>
                    <literal>testPlayBinary</literal>
                </td>
                <td>
                    <literal>playBinary</literal> to build Play application and <literal>compilePlayBinaryTests</literal>.
                </td>
                <td><apilink class="org.gradle.api.tasks.testing.Test"/></td>
                <td>Runs JUnit/TestNG tests for the Play application.</td>
            </tr>
            <tr>
                <td>
                    <literal>createPlayBinaryDist</literal>
                </td>
                <td>Staging task for the Play application.</td>
                <td><apilink class="org.gradle.api.tasks.bundling.Zip"/></td>
                <td>Bundles the Play application as a distribution.</td>
            </tr>
            <tr>
                <td>
                    <literal>stagePlayBinaryDist</literal>
                </td>
                <td>
                    All compile tasks, jar building tasks, and start script script generating tasks.
                </td>
                <td><apilink class="org.gradle.api.tasks.Copy"/></td>
                <td>Copies all compiled classes and public assets into a staging directory.</td>
            </tr>
        </table>
        <para>For the different types of sources in a Play application, the plugin adds the following compilation tasks:</para>
        <table id="play_source_set_tasks">
            <title>Play plugin - source set tasks</title>
            <thead>
                <tr>
                    <td>Task name</td>
                    <td>Source Type</td>
                    <td>Type</td>
                    <td>Description</td>
                </tr>
            </thead>
            <tr>
                <td>
                    <literal>compilePlayBinaryScala</literal>
                </td>
                <td>
                    Scala and Java
                </td>
                <td><apilink class="org.gradle.language.scala.tasks.PlatformScalaCompile"/></td>
                <td>Compiles all Scala and Java sources defined by the Play application.</td>
            </tr>
            <tr>
                <td>
                    <literal>compilePlayBinaryTwirlTemplates</literal>
                </td>
                <td>
                    Twirl HTML templates
                </td>
                <td><apilink class="org.gradle.play.tasks.TwirlCompile"/></td>
                <td>Compiles HTML templates with the Twirl compiler.</td>
            </tr>
            <tr>
                <td>
                    <literal>compilePlayBinaryRoutes</literal>
                </td>
                <td>
                    Play Route files
                </td>
                <td><apilink class="org.gradle.play.tasks.RoutesCompile"/></td>
                <td>Compiles routes files into Scala sources.</td>
            </tr>
        </table>
    </section>

    <section>
        <title>Finding out more about your project</title>
        <para>
            Gradle provides a report that you can run from the command-line that shows some details about the components and binaries that your
            project produces. To use this report, just run <userinput>gradle components</userinput>. Below is an example of running this report for
            one of the sample projects:
        </para>
        <sample id="playComponentReport" dir="play/basic" title="The components report">
            <output args='components'/>
        </sample>
    </section>

    <section>
        <title>Configuring a Play application</title>
        <section>
            <title>Targeting a certain version of Play</title>
            <para>
                By default, Gradle uses Play 2.3.9, Scala 2.10 and the version of Java used to start the build.
                A Play application can select a different version by supplying a target PlayPlatform.
            </para>
            <sample id="specifyPlayVersion" dir="play/advanced" title="Selecting a version of the Play Framework">
                <sourcefile file="build.gradle" snippet="play-platform"/>
            </sample>
        </section>
        <section>
            <title>Adding dependencies</title>
            <para>
                You can add compile, test and runtime dependencies to a Play application through Configurations created by the Play plugin.
                This is the same way dependencies are added in regular Java projects, so you can use the same dependency notations.
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        <literal>play</literal> is used for compile time dependencies.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <literal>playTest</literal> is used for compile time dependencies.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <literal>playRun</literal> is used for compile time dependencies.
                    </para>
                </listitem>
            </itemizedlist>
            <sample id="addPlayDependencies" dir="play/advanced" title="Adding dependencies to a Play application">
                <sourcefile file="build.gradle" snippet="play-dependencies"/>
            </sample>
        </section>

        <section>
            <title>Adding extra source sets</title>
            <para>
                If your Play application has additional sources that exist in non-standard directories, you can add extra source sets that Gradle will automatically add to the appropriate compile tasks.
            </para>
            <sample id="addExtraPlaySourcesets" dir="play/extra-sourcesets" title="Adding extra source sets to a Play application">
                <sourcefile file="build.gradle" snippet="play-extra-sourcesets"/>
            </sample>
        </section>
        <section>
            <title>Configuring compiler options</title>
            <para>
                If your Play application requires additional Scala compiler flags, you can add these arguments directly to the Scala compiler task.
            </para>
            <sample id="configureScalaCompiler" dir="play/configure-compiler" title="Configuring Scala compiler options">
                <sourcefile file="build.gradle" snippet="play-configure-compiler"/>
            </sample>
        </section>
        <!-- TODO: This doesn't work
        <section>
            <title>Adding additional files to your Play application distribution</title>
            <para>
                If your Play application needs to include additional files into your distribution zip, you can add these files like any other <apilink class="org.gradle.api.distribution.Distribution"/>.
            </para>
            <sample id="addFilesToPlayDistribution" dir="play/custom-distribution" title="Add extra files to Play application zip">
                <sourcefile file="build.gradle" snippet="play-custom-distribution"/>
            </sample>
        </section>
        -->
    </section>

    <section>
        <title>Multi-project Play applications</title>
        <para>
            Play applications can be built in multi-project builds as well.  Simply apply the <literal>play</literal> plugin in the appropriate subproject.
            See the sample provided in the Gradle distribution for a working example.
        </para>
    </section>
<!--
    TODO: Create asset pipeline sample
    <section>
        <title>Extending the Play Software Model</title>
    </section>
-->
    <section>
        <title>Resources</title>
        <para>
            For additional information about developing Play applications:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    Take a look at the Play types in the Gradle DSL Guide.
                </para>
            </listitem>
            <listitem>
                <para>
                    <ulink url="https://www.playframework.com/documentation">Play Framework Documentation</ulink>.
                </para>
            </listitem>
        </itemizedlist>
    </section>
</chapter>
