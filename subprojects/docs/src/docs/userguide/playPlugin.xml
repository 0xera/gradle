<!--
  ~ Copyright 2015 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<chapter id='play_plugin' xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>The Play Plugin</title>
    <note>
        <para>
            The Gradle support for building Play applications is currently <link linkend="feature_lifecycle">incubating</link>. Please be aware that the DSL and other configuration may change in later Gradle versions.
        </para>
    </note>

    <para>
        <ulink url="https://www.playframework.com/">Play</ulink> is a modern web application framework.
        The Play plugin adds support for building, testing and running Play applications with Gradle.
    </para>

    <section>
        <title>Usage</title>
        <para>To use the Play plugin, include the following in your build script to apply the <literal>play</literal> plugin and add the Typesafe repositories:</para>
        <sample id="usePlayPlugin" dir="play/basic" title="Using the Play plugin">
            <sourcefile file="build.gradle" snippet="use-plugin"/>
        </sample>
    </section>

    <section>
        <title>Limitations</title>
        <para>The Play plugin currently has a few limitations.</para>
        <itemizedlist>
            <listitem>
                <para>
                    Support is limited to Play 2.2.x and 2.3.x applications.
                    Future Gradle versions will add support for Play 2.4.x and 3.0.x.
                </para>
            </listitem>
            <listitem>
                <para>
                    A given project may only define a single Play application.  This means that a single project cannot build more than one play application.
                    However, a multi-project build can have many projects that each define their own Play application.
                </para>
            </listitem>
            <listitem>
                <para>
                    Play applications can only target a single “platform” (combination of Play, Scala and Java version) at a time.  This means that it is
                    currently not possible to define multiple variants of a play application that for example, produce jars for both Scala 2.10 and 2.11.
                    This limitation may be lifted in future Gradle versions.
                </para>
            </listitem>
        </itemizedlist>
    </section>

    <section>
        <title>Software Model</title>

        <para>
            The Play plugin uses a <link linkend="new_model">software model</link> to describe a Play application.  The software model is comprised of
            "components" and "binaries".  Components are abstract software elements that are built to produce binaries.
            A Play application is represented by a <apilink class="org.gradle.play.PlayApplicationSpec"/> component type.  The plugin automatically
            creates a single <apilink class="org.gradle.play.PlayApplicationBinarySpec"/> when it is applied.
            A project can only have one PlayApplicationSpec component.
        </para>

        <figure>
            <title>Play plugin - software model</title>
            <imageobject>
                <imagedata fileref="img/playPluginModel.png"/>
            </imageobject>
        </figure>

        <section>
            <title>The Play application component</title>
            <para>
                A Play application component consists of several configuration elements that describe the application to be built.  One element that
                describes the application are the source sets that define where the application controller, route, template and model class source
                files should be found.  These source sets are logical groupings of files of a particular type.  A default source set for each type is
                created when the <literal>play</literal> plugin is applied.
            </para>
            <table>
                <title>Default Play source sets</title>
                <thead>
                    <tr>
                        <td>Source Set</td>
                        <td>Type</td>
                        <td>Directory</td>
                        <td>Filters</td>
                    </tr>
                </thead>
                <tr>
                    <td>java</td>
                    <td><apilink class="org.gradle.language.java.JavaSourceSet"/></td>
                    <td>app</td>
                    <td>**/*.java</td>
                </tr>
                <tr>
                    <td>scala</td>
                    <td><apilink class="org.gradle.language.scala.ScalaLanguageSourceSet"/></td>
                    <td>app</td>
                    <td>**/*.scala</td>
                </tr>
                <tr>
                    <td>routes</td>
                    <td><apilink class="org.gradle.language.routes.RoutesSourceSet"/></td>
                    <td>conf</td>
                    <td>routes, *.routes</td>
                </tr>
                <tr>
                    <td>twirlTemplates</td>
                    <td><apilink class="org.gradle.language.twirl.TwirlSourceSet"/></td>
                    <td>app</td>
                    <td>**/*.html</td>
                </tr>
                <tr>
                    <td>javaScript</td>
                    <td><apilink class="org.gradle.language.javascript.JavaScriptSourceSet"/></td>
                    <td>app/assets</td>
                    <td>**/*.js</td>
                </tr>
            </table>
            <para>
                These source sets can be configured or additional source sets can be added to the Play component.  See <link linkend="configuring_play">Configuring Play</link> for further information.
            </para>
            <para>
                Another element of configuring a Play application is the <literal>platform</literal>.  To build a play application, Gradle needs to understand which versions of Play, Scala and Java to use.
                The Play component specifies this requirement as a <apilink class="org.gradle.play.platform.PlayPlatform"/>.  If these values are not configured, a default version of Play, Scala and Java
                will be used.  See <link linkend="configuring_play_platform">Targeting a certain version of Play</link> for information on configuring the Play platform.
            </para>
            <para>
                Note that only a single platform can be specified for a given Play component.  This means that only a single version of
                Play, Scala and Java can be used to build a play component.  In other words, a play component can only produce one set of outputs, and
                those outputs will be built using the versions specified by the platform configured on the component.
            </para>
        </section>
        <section>
            <title>The Play application binary</title>
            <para>
                A Play application component is compiled and packaged to produce a set of outputs which are represented by a <apilink class="org.gradle.play.PlayApplicationBinarySpec"/>.
                The Play binary specifies the jar files produced by building the component as well as providing elements by which additional content can be added to those jar files.
                It also exposes the tasks involved in building the component and creating the binary.
            </para>
            <para>
                See <link linkend="configuring_play">Configuring Play</link> for further information on configuring the Play binary.
            </para>
        </section>
    </section>

    <section>
        <title>Project Layout</title>
        <para>The Play plugin follows the typical Play application layout.  You can configure source sets to include additional directories or change the defaults.</para>
        <screen>
            ├── app                 <lineannotation>→ Application source code.</lineannotation>
            │   ├── assets          <lineannotation>→ Assets that require compilation.</lineannotation>
            │   │   └── javascripts <lineannotation>→ JavaScript source code to be minified.</lineannotation>
            │   ├── controllers     <lineannotation>→ Application controller source code.</lineannotation>
            │   ├── models          <lineannotation>→ Application business source code.</lineannotation>
            │   └── views           <lineannotation>→ Application UI templates.</lineannotation>
            ├── build.gradle        <lineannotation>→ Your project's build script.</lineannotation>
            ├── conf                <lineannotation>→ Main application configuration file and routes files.</lineannotation>
            ├── public              <lineannotation>→ Public assets.</lineannotation>
            │   ├── images          <lineannotation>→ Application image files.</lineannotation>
            │   ├── javascripts     <lineannotation>→ Typically JavaScript source code.</lineannotation>
            │   └── stylesheets     <lineannotation>→ Typically CSS source code.</lineannotation>
            └── test                <lineannotation>→ Test source code.</lineannotation>
        </screen>
    </section>

    <section>
        <title>Tasks</title>

        <para>The Play plugin also adds a number of tasks which form a lifecycle for the project:</para>

        <table id="play_lifecycle_tasks">
            <title>Play plugin - lifecycle tasks</title>
            <thead>
                <tr>
                    <td>Task name</td>
                    <td>Depends on</td>
                    <td>Type</td>
                    <td>Description</td>
                </tr>
            </thead>
            <tr>
                <td>
                    <literal>playBinary</literal>
                </td>
                <td>
                    All compile tasks for source sets added to the Play application.
                </td>
                <td><apilink class="org.gradle.api.Task"/></td>
                <td>Performs a build of just the Play application.</td>
            </tr>
            <tr>
                <td>
                    <literal>dist</literal>
                </td>
                <td>
                    <literal>createPlayBinaryDist</literal>
                </td>
                <td><apilink class="org.gradle.api.Task"/></td>
                <td>Assembles the Play distribution.</td>
            </tr>
            <tr>
                <td>
                    <literal>stage</literal>
                </td>
                <td>
                    <literal>stagePlayBinaryDist</literal>
                </td>
                <td><apilink class="org.gradle.api.Task"/></td>
                <td>Stages the Play distribution.</td>
            </tr>
        </table>
        <para>The plugin also provides tasks for running, testing and packaging your Play application:</para>
        <table>
            <title>Play plugin - running and testing tasks</title>
            <thead>
                <tr>
                    <td>Task name</td>
                    <td>Depends on</td>
                    <td>Type</td>
                    <td>Description</td>
                </tr>
            </thead>
            <tr>
                <td>
                    <literal>runPlayBinary</literal>
                </td>
                <td>
                    <literal>playBinary</literal> to build Play application.
                </td>
                <td><apilink class="org.gradle.play.tasks.PlayRun"/></td>
                <td>Runs the Play application for local development.</td>
            </tr>
            <tr>
                <td>
                    <literal>testPlayBinary</literal>
                </td>
                <td>
                    <literal>playBinary</literal> to build Play application and <literal>compilePlayBinaryTests</literal>.
                </td>
                <td><apilink class="org.gradle.api.tasks.testing.Test"/></td>
                <td>Runs JUnit/TestNG tests for the Play application.</td>
            </tr>
            <tr>
                <td>
                    <literal>createPlayBinaryDist</literal>
                </td>
                <td>Staging task for the Play application.</td>
                <td><apilink class="org.gradle.api.tasks.bundling.Zip"/></td>
                <td>Bundles the Play application as a distribution.</td>
            </tr>
            <tr>
                <td>
                    <literal>stagePlayBinaryDist</literal>
                </td>
                <td>
                    All compile tasks, jar building tasks, and start script script generating tasks.
                </td>
                <td><apilink class="org.gradle.api.tasks.Copy"/></td>
                <td>Copies all compiled classes and public assets into a staging directory.</td>
            </tr>
        </table>
        <para>For the different types of sources in a Play application, the plugin adds the following compilation tasks:</para>
        <table id="play_source_set_tasks">
            <title>Play plugin - source set tasks</title>
            <thead>
                <tr>
                    <td>Task name</td>
                    <td>Source Type</td>
                    <td>Type</td>
                    <td>Description</td>
                </tr>
            </thead>
            <tr>
                <td>
                    <literal>compilePlayBinaryScala</literal>
                </td>
                <td>
                    Scala and Java
                </td>
                <td><apilink class="org.gradle.language.scala.tasks.PlatformScalaCompile"/></td>
                <td>Compiles all Scala and Java sources defined by the Play application.</td>
            </tr>
            <tr>
                <td>
                    <literal>compilePlayBinaryTwirlTemplates</literal>
                </td>
                <td>
                    Twirl HTML templates
                </td>
                <td><apilink class="org.gradle.play.tasks.TwirlCompile"/></td>
                <td>Compiles HTML templates with the Twirl compiler.</td>
            </tr>
            <tr>
                <td>
                    <literal>compilePlayBinaryRoutes</literal>
                </td>
                <td>
                    Play Route files
                </td>
                <td><apilink class="org.gradle.play.tasks.RoutesCompile"/></td>
                <td>Compiles routes files into Scala sources.</td>
            </tr>
            <tr>
                <td>
                    <literal>minifyPlayBinaryJavaScript</literal>
                </td>
                <td>
                    JavaScript files
                </td>
                <td><apilink class="org.gradle.play.tasks.JavaScriptMinify"/></td>
                <td>Minifies JavaScript files with the Google Closure compiler.</td>
            </tr>
        </table>
    </section>

    <section>
        <title>Finding out more about your project</title>
        <para>
            Gradle provides a report that you can run from the command-line that shows some details about the components and binaries that your
            project produces. To use this report, just run <userinput>gradle components</userinput>. Below is an example of running this report for
            one of the sample projects:
        </para>
        <sample id="playComponentReport" dir="play/basic" title="The components report">
            <output args='components'/>
        </sample>
    </section>

    <section id="configuring_play">
        <title>Configuring a Play application</title>
        <section id="configuring_play_platform">
            <title>Targeting a certain version of Play</title>
            <para>
                By default, Gradle uses Play 2.3.9, Scala 2.10 and the version of Java used to start the build.
                A Play application can select a different version by specifying a target <apilink class="org.gradle.play.PlayApplicationSpec" method="platform">platform</apilink> on the Play application component.
            </para>
            <sample id="specifyPlayVersion" dir="play/advanced" title="Selecting a version of the Play Framework">
                <sourcefile file="build.gradle" snippet="play-platform"/>
            </sample>
        </section>
        <section>
            <title>Adding dependencies</title>
            <para>
                You can add compile, test and runtime dependencies to a Play application through <apilink class="org.gradle.api.artifacts.Configuration">Configurations</apilink> created by the Play plugin.
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        <literal>play</literal> is used for compile time dependencies.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <literal>playTest</literal> is used for test compile time dependencies.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <literal>playRun</literal> is used for run time dependencies.
                    </para>
                </listitem>
            </itemizedlist>
            <sample id="addPlayDependencies" dir="play/advanced" title="Adding dependencies to a Play application">
                <sourcefile file="build.gradle" snippet="play-dependencies"/>
            </sample>
        </section>

        <section>
            <title>Configuring the default source sets</title>
            <para>You can further configure the default source sets to do things like add new directories, add filters, etc.</para>
            <sample id="addExtraPlaySourcesets" dir="play/sourcesets" title="Adding extra source sets to a Play application">
                <sourcefile file="build.gradle" snippet="default-sourcesets"/>
            </sample>
        </section>
        <section>
            <title>Adding extra source sets</title>
            <para>
                If your Play application has additional sources that exist in non-standard directories, you can add extra source sets that Gradle will automatically add to the appropriate compile tasks.
            </para>
            <sample id="addExtraPlaySourcesets" dir="play/sourcesets" title="Adding extra source sets to a Play application">
                <sourcefile file="build.gradle" snippet="play-extra-sourcesets"/>
            </sample>
        </section>
        <section>
            <title>Configuring compiler options</title>
            <para>
                If your Play application requires additional Scala compiler flags, you can add these arguments directly to the Scala compiler task.
            </para>
            <sample id="configureScalaCompiler" dir="play/configure-compiler" title="Configuring Scala compiler options">
                <sourcefile file="build.gradle" snippet="play-configure-compiler"/>
            </sample>
        </section>
        <!-- TODO: This doesn't work
        <section>
            <title>Adding additional files to your Play application distribution</title>
            <para>
                If your Play application needs to include additional files into your distribution zip, you can add these files like any other <apilink class="org.gradle.api.distribution.Distribution"/>.
            </para>
            <sample id="addFilesToPlayDistribution" dir="play/custom-distribution" title="Add extra files to Play application zip">
                <sourcefile file="build.gradle" snippet="play-custom-distribution"/>
            </sample>
        </section>
        -->
    </section>

    <section>
        <title>Multi-project Play applications</title>
        <para>
            Play applications can be built in multi-project builds as well.  Simply apply the <literal>play</literal> plugin in the appropriate subproject.
            See the sample provided in the Gradle distribution for a working example.
        </para>
    </section>
<!--
    TODO: Create asset pipeline sample
    <section>
        <title>Extending the Play Software Model</title>
    </section>
-->
    <section>
        <title>Resources</title>
        <para>
            For additional information about developing Play applications:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    Take a look at the Play types in the Gradle DSL Guide.
                </para>
            </listitem>
            <listitem>
                <para>
                    <ulink url="https://www.playframework.com/documentation">Play Framework Documentation</ulink>.
                </para>
            </listitem>
        </itemizedlist>
    </section>
</chapter>
