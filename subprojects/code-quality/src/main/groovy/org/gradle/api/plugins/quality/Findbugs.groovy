/*
 * Copyright 2011 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.gradle.api.plugins.quality

import org.gradle.api.GradleException
import org.gradle.api.file.FileCollection
import org.gradle.api.tasks.InputFiles
import org.gradle.api.tasks.OutputFile
import org.gradle.api.tasks.SourceTask
import org.gradle.api.tasks.TaskAction
import org.gradle.api.tasks.VerificationTask

/**
 * <p>
 * Gradle task that runs FindBugs analysis on your code.
 * </p>
 * <p>
 * See {link: http://findbugs.sourceforge.net/} for more information
 * about the tool.
 * </p>
 */
class FindBugs extends SourceTask implements VerificationTask {
	
    /**
     * The additional classes that should be on the classpath during the analysis.  These classes
     * will not be analyzed.
     */
    @InputFiles FileCollection classpath = null
	
    /**
     * The classes to analyze.
     */
    @InputFiles FileCollection classes = null
	
    /**
     * Whether or not to allow the build to continue if there are warnings.
     */
    boolean ignoreFailures = false
	
    /**
     * The file to place the XML results in.
     */
    @OutputFile File resultsFile = null
    
    /**
     * Runs the FindBugs analysis on the code.
     * <ul>
     * <li>{@code source} is used as the {@code -sourcepath} parameter</li>
     * <li>{@code classes} is used as the class location parameter</li>
     * <li>{@code classpath} is used as the {@code -auxclasspath} parameter</li>
     * <li>{@code findbugsProps} are passed directly to findbugs, in order</li>
     * <li>{@code systemProps} are passed as JVM arguments</li> 
     * <li>{@code resultsFile} specifies where the XML results will be stored</li>
     * </ul>
     *
     */
    @TaskAction
    void check() {
		String warningsProp = 'findbugsWarnings'
		FileCollection pluginClasspath = project.configurations[FindBugsPlugin.FINDBUGS_CONFIGURATION_NAME]
		getResultsFile().parentFile.mkdirs()
		
		ant.taskdef(name:'findbugs', classname:'edu.umd.cs.findbugs.anttask.FindBugsTask', classpath:pluginClasspath.asPath)
		ant.findbugs(outputFile:getResultsFile(), failOnError:!getIgnoreFailures(), warningsProperty:warningsProp) {
			pluginClasspath.addToAntBuilder(ant, 'classpath')
			pluginClasspath.addToAntBuilder(ant, 'pluginList')
			getClasspath().addToAntBuilder(ant, 'auxClasspath')
			getSource().addToAntBuilder(ant, 'sourcePath')
			getClasses().asFileTree.files.each {
				'class'(location:it)
			}
		}
		
		if (!ignoreFailures && ant.properties[warningsProp]) {
			throw new GradleException("FindBugs reported warnings. See the report at ${getResultsFile()}.")
		}
    }
    
    /**
     * Sets whether warnings generated by FindBugs will
     * stop the build.
     * @param ignoreFailures
     * @return {@code this}
     */
    @Override
    VerificationTask setIgnoreFailures(boolean ignoreFailures) {
        this.ignoreFailures = ignoreFailures
        return this
    }
}