<?xml version="1.0" encoding="UTF-8"?>
<build-type xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" uuid="2f669273-1323-4257-939e-fb7d66256962" xsi:noNamespaceSchemaLocation="http://www.jetbrains.com/teamcity/schemas/10.0/project-config.xsd">
  <name>Performance Test Coordinator - Linux</name>
  <description />
  <settings>
    <options>
      <option name="artifactRules" value="subprojects/*/build/performance-tests/** =&gt; results" />
      <option name="checkoutMode" value="ON_AGENT" />
      <option name="enableHangingBuildsDetection" value="false" />
      <option name="executionTimeoutMin" value="420" />
      <option name="maximumNumberOfBuilds" value="1" />
    </options>
    <disabled-settings>
      <setting-ref ref="TRIGGER_1" />
    </disabled-settings>
    <parameters>
      <param name="TC_USERNAME" value="TeamcityRestBot" />
      <param name="env.GRADLE_OPTS" value="-Xmx1536m -XX:MaxPermSize=384m" />
      <param name="env.JAVA_HOME" value="/opt/jdk/oracle-jdk-8-latest" />
      <param name="performance.db.url" value="jdbc:h2:ssl://dev61.gradle.org:9092" />
      <param name="performance.db.username" value="tcagent" />
    </parameters>
    <build-runners>
      <runner id="RUNNER_1" name="GRADLE_RUNNER" type="gradle-runner">
        <parameters>
          <param name="teamcity.coverage.emma.include.source" value="true" />
          <param name="teamcity.coverage.emma.instr.parameters" value="-ix -*Test*" />
          <param name="teamcity.coverage.idea.includePatterns" value="*" />
          <param name="teamcity.coverage.jacoco.patterns" value="+:*" />
          <param name="teamcity.step.mode" value="default" />
          <param name="ui.gradleRUnner.gradle.build.file" value="build.gradle" />
          <param name="ui.gradleRunner.additional.gradle.cmd.params" value="cleanDistributedPerformanceTest distributedPerformanceTests -x prepareSamples -PtimestampedVersion -PmaxParallelForks=%maxParallelForks% -s --no-daemon --continue -Porg.gradle.performance.db.url=%performance.db.url% -Porg.gradle.performance.db.username=%performance.db.username% -PteamCityUsername=%TC_USERNAME% -PteamCityPassword=%teamcity.password.restbot% -Porg.gradle.performance.buildTypeId=Gradle_Master_Performance_IndividualPerformanceScenarioWorkersLinux -Porg.gradle.performance.workerTestTaskName=fullPerformanceTest -Porg.gradle.performance.coordinatorBuildId=%teamcity.build.id% -Porg.gradle.performance.db.password=%performance.db.password.tcagent% -Porg.gradle.performance.branchName=master  -Djava7.home=%linux.jdk.for.gradle.compile% -I ./gradle/buildScanInit.gradle" />
          <param name="ui.gradleRunner.gradle.wrapper.useWrapper" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_2" name="CHECK_CLEAN_M2" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[REPO=/home/%env.USER%/.m2/repository
if [ -e $REPO ] ; then
tree $REPO
rm -rf $REPO
echo "$REPO was polluted during the build"
return 1
else
echo "$REPO does not exist"
fi]]></param>
          <param name="teamcity.step.mode" value="execute_always" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_3" name="TAG_BUILD" type="gradle-runner">
        <parameters>
          <param name="teamcity.coverage.emma.include.source" value="true" />
          <param name="teamcity.coverage.emma.instr.parameters" value="-ix -*Test*" />
          <param name="teamcity.coverage.idea.includePatterns" value="*" />
          <param name="teamcity.coverage.jacoco.patterns" value="+:*" />
          <param name="teamcity.step.mode" value="execute_always" />
          <param name="ui.gradleRUnner.gradle.build.file" value="gradle/buildTagging.gradle" />
          <param name="ui.gradleRunner.additional.gradle.cmd.params" value="-PteamCityUsername=%teamcity.username.restbot% -PteamCityPassword=%teamcity.password.restbot% -PteamCityBuildId=%teamcity.build.id% -PgithubToken=%github.ci.oauth.token% -Djava7.home=%linux.jdk.for.gradle.compile%" />
          <param name="ui.gradleRunner.gradle.tasks.names" value="tagBuild" />
          <param name="ui.gradleRunner.gradle.wrapper.useWrapper" value="true" />
        </parameters>
      </runner>
    </build-runners>
    <vcs-settings>
      <vcs-entry-ref root-id="Gradle_Branches_GradlePersonalBranches" />
    </vcs-settings>
    <requirements>
      <contains id="RQ_1" name="teamcity.agent.jvm.os.name" value="Linux" />
    </requirements>
    <build-triggers>
      <build-trigger id="TRIGGER_1" type="schedulingTrigger">
        <parameters>
          <param name="branchFilter" value="+:*" />
          <param name="cronExpression_dm" value="*" />
          <param name="cronExpression_dw" value="?" />
          <param name="cronExpression_hour" value="0/2" />
          <param name="cronExpression_min" value="30" />
          <param name="cronExpression_month" value="*" />
          <param name="cronExpression_sec" value="0" />
          <param name="cronExpression_year" value="*" />
          <param name="dayOfWeek" value="Sunday" />
          <param name="enableQueueOptimization" value="true" />
          <param name="hour" value="12" />
          <param name="minute" value="0" />
          <param name="promoteWatchedBuild" value="true" />
          <param name="revisionRule" value="lastFinished" />
          <param name="revisionRuleBuildBranch" value="&lt;default&gt;" />
          <param name="schedulingPolicy" value="cron" />
          <param name="timezone" value="SERVER" />
          <param name="triggerBuildIfWatchedBuildChanges" value="" />
          <param name="triggerBuildWithPendingChangesOnly" value="" />
        </parameters>
      </build-trigger>
    </build-triggers>
    <artifact-dependencies>
      <dependency id="ARTIFACT_DEPENDENCY_1" sourceBuildTypeId="Gradle_Check_Stage1_BuildDistributions" cleanDestination="true">
        <revisionRule name="sameChainOrLastFinished" revision="latest.sameChainOrLastFinished" />
        <artifact sourcePath="distributions/*-all.zip =&gt; incoming-distributions&#xA;build-receipt.properties =&gt; incoming-distributions" />
      </dependency>
    </artifact-dependencies>
    <dependencies>
      <depend-on sourceBuildTypeId="Gradle_Check_Stage3_Passes">
        <options>
          <option name="run-build-if-dependency-failed" value="CANCEL" />
          <option name="run-build-if-dependency-failed-to-start" value="CANCEL" />
          <option name="take-started-build-with-same-revisions" value="true" />
          <option name="take-successful-builds-only" value="true" />
        </options>
      </depend-on>
    </dependencies>
    <cleanup />
  </settings>
</build-type>

