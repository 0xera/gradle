<?xml version="1.0" encoding="UTF-8"?>
<build-type xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" uuid="Gradle_Check_IndividualPerformanceScenarioWorkersLinux" xsi:noNamespaceSchemaLocation="http://www.jetbrains.com/teamcity/schemas/2018.1/project-config.xsd">
  <name>Individual Performance Scenario Workers - Linux</name>
  <description />
  <settings>
    <options>
      <option name="artifactRules" value="subprojects/*/build/test-results-*.zip =&gt; results&#xA;subprojects/*/build/tmp/**/log.txt =&gt; failure-logs" />
      <option name="buildDefaultBranch" value="false" />
      <option name="checkoutMode" value="ON_AGENT" />
      <option name="executionTimeoutMin" value="420" />
    </options>
    <parameters>
      <param name="baselines" value="defaults" />
      <param name="channel" value="commits" />
      <param name="checks" value="all" />
      <param name="env.ANDROID_HOME" value="/opt/android/sdk" />
      <param name="env.GRADLE_OPTS" value="-Xmx1536m -XX:MaxPermSize=384m" />
      <param name="env.JAVA_HOME" value="/opt/jdk/oracle-jdk-8-latest" />
      <param name="env.LC_ALL" value="en_US.UTF-8" />
      <param name="env.PATH" value="%env.PATH%:/opt/swift/latest/usr/bin" />
      <param name="performance.db.url" value="jdbc:h2:ssl://dev61.gradle.org:9092" />
      <param name="performance.db.username" value="tcagent" />
      <param name="runs" value="defaults" />
      <param name="scenario" value="" />
      <param name="templates" value="" />
      <param name="warmups" value="defaults" />
    </parameters>
    <build-runners>
      <runner id="RUNNER_1" name="GRADLE_RUNNER" type="gradle-runner">
        <parameters>
          <param name="teamcity.coverage.emma.include.source" value="true" />
          <param name="teamcity.coverage.emma.instr.parameters" value="-ix -*Test*" />
          <param name="teamcity.coverage.idea.includePatterns" value="*" />
          <param name="teamcity.coverage.jacoco.patterns" value="+:*" />
          <param name="teamcity.step.mode" value="default" />
          <param name="ui.gradleRUnner.gradle.build.file" value="" />
          <param name="ui.gradleRunner.additional.gradle.cmd.params" value="-PmaxParallelForks=%maxParallelForks% -s --no-daemon --continue -I &quot;%teamcity.build.checkoutDir%/gradle/init-scripts/build-scan.init.gradle.kts&quot; -Djava7Home=%linux.jdk.for.gradle.compile% -Djava9Home=%linux.java9.oracle.64bit% -Dorg.gradle.internal.tasks.createops clean %templates% fullPerformanceTests --scenarios &quot;%scenario%&quot; --baselines %baselines% --warmups %warmups% --runs %runs% --checks %checks% --channel %channel% -x prepareSamples -x performanceReport -Porg.gradle.performance.db.url=%performance.db.url% -Porg.gradle.performance.db.username=%performance.db.username% -Porg.gradle.performance.db.password=%performance.db.password.tcagent% -PtimestampedVersion &quot;-Dscan.tag.IndividualPerformanceScenarioWorkers&quot; --build-cache &quot;-Dgradle.cache.remote.url=%gradle.cache.remote.url%&quot; &quot;-Dgradle.cache.remote.username=%gradle.cache.remote.username%&quot; &quot;-Dgradle.cache.remote.password=%gradle.cache.remote.password%&quot;" />
          <param name="ui.gradleRunner.gradle.tasks.names" value="" />
          <param name="ui.gradleRunner.gradle.wrapper.useWrapper" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_2" name="CHECK_CLEAN_M2" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[REPO=%teamcity.agent.jvm.user.home%/.m2/repository
if [ -e $REPO ] ; then
    tree $REPO
    rm -rf $REPO
    echo "$REPO was polluted during the build"
    return 1
else
    echo "$REPO does not exist"
fi]]></param>
          <param name="teamcity.step.mode" value="execute_always" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
    </build-runners>
    <vcs-settings>
      <vcs-entry-ref root-id="Gradle_Branches_GradlePersonalBranches" />
    </vcs-settings>
    <requirements>
      <contains id="RQ_1" name="teamcity.agent.jvm.os.name" value="Linux" />
    </requirements>
    <build-triggers />
    <artifact-dependencies>
      <dependency id="ARTIFACT_DEPENDENCY_Gradle_Check_SanityCheck" sourceBuildTypeId="Gradle_Check_SanityCheck" cleanDestination="true">
        <revisionRule name="sameChainOrLastFinished" revision="latest.sameChainOrLastFinished" />
        <artifact sourcePath="build-receipt.properties =&gt; incoming-distributions" />
      </dependency>
    </artifact-dependencies>
    <dependencies>
      <depend-on sourceBuildTypeId="Gradle_Check_SanityCheck">
        <options>
          <option name="run-build-if-dependency-failed" value="CANCEL" />
          <option name="run-build-if-dependency-failed-to-start" value="CANCEL" />
          <option name="take-started-build-with-same-revisions" value="true" />
          <option name="take-successful-builds-only" value="true" />
        </options>
      </depend-on>
    </dependencies>
    <cleanup />
  </settings>
</build-type>

