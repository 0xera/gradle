package Gradle_Check.patches.buildTypes

import jetbrains.buildServer.configs.kotlin.v2017_2.*
import jetbrains.buildServer.configs.kotlin.v2017_2.buildSteps.GradleBuildStep
import jetbrains.buildServer.configs.kotlin.v2017_2.buildSteps.gradle
import jetbrains.buildServer.configs.kotlin.v2017_2.buildSteps.script
import jetbrains.buildServer.configs.kotlin.v2017_2.ui.*

/*
This patch script was generated by TeamCity on settings change in UI.
To apply the patch, change the buildType with uuid = 'Gradle_Check_PerformanceTestCoordinator' (id = 'Gradle_Check_PerformanceTestCoordinator')
accordingly and delete the patch script.
*/
changeBuildType("Gradle_Check_PerformanceTestCoordinator") {
    expectSteps {
        gradle {
            name = "GRADLE_RUNNER"
            tasks = ""
            buildFile = ""
            gradleParams = """clean distributedPerformanceTests -x prepareSamples --baselines %performance.baselines%  -PtimestampedVersion -Porg.gradle.performance.branchName=%teamcity.build.branch% -Porg.gradle.performance.db.url=%performance.db.url% -Porg.gradle.performance.db.username=%performance.db.username% -PteamCityUsername=%TC_USERNAME% -PteamCityPassword=%teamcity.password.restbot% -Porg.gradle.performance.buildTypeId=Gradle_Check_IndividualPerformanceScenarioWorkersLinux -Porg.gradle.performance.workerTestTaskName=fullPerformanceTest -Porg.gradle.performance.coordinatorBuildId=%teamcity.build.id% -Porg.gradle.performance.db.password=%performance.db.password.tcagent% "-Dscan.tag.PerformanceTest" -PmaxParallelForks=%maxParallelForks% -s --daemon --continue -I "%teamcity.build.checkoutDir%/gradle/init-scripts/build-scan.init.gradle.kts" -Djava7Home=%linux.jdk.for.gradle.compile% --build-cache "-Dgradle.cache.remote.url=%gradle.cache.remote.url%" "-Dgradle.cache.remote.username=%gradle.cache.remote.username%" "-Dgradle.cache.remote.password=%gradle.cache.remote.password%""""
            useGradleWrapper = true
        }
        script {
            name = "CHECK_CLEAN_M2"
            executionMode = BuildStep.ExecutionMode.ALWAYS
            scriptContent = """
                REPO=%teamcity.agent.jvm.user.home%/.m2/repository
                if [ -e ${'$'}REPO ] ; then
                    tree ${'$'}REPO
                    rm -rf ${'$'}REPO
                    echo "${'$'}REPO was polluted during the build"
                    return 1
                else
                    echo "${'$'}REPO does not exist"
                fi
            """.trimIndent()
        }
        gradle {
            name = "TAG_BUILD"
            executionMode = BuildStep.ExecutionMode.ALWAYS
            tasks = "tagBuild"
            buildFile = "gradle/buildTagging.gradle"
            gradleParams = "-PteamCityUsername=%teamcity.username.restbot% -PteamCityPassword=%teamcity.password.restbot% -PteamCityBuildId=%teamcity.build.id% -PgithubToken=%github.ci.oauth.token% -Djava7Home=%linux.jdk.for.gradle.compile%"
            useGradleWrapper = true
        }
    }
    steps {
        update<GradleBuildStep>(0) {
            gradleParams = """clean distributedPerformanceTests -x prepareSamples --baselines %performance.baselines%  -PtimestampedVersion -Porg.gradle.performance.branchName=%teamcity.build.branch% -Porg.gradle.performance.db.url=%performance.db.url% -Porg.gradle.performance.db.username=%performance.db.username% -I %teamcity.build.checkoutDir%/gradle/init-scripts/build-scan.init.gradle.kts -PteamCityUsername=%TC_USERNAME% -PteamCityPassword=%teamcity.password.restbot% -Porg.gradle.performance.buildTypeId=Gradle_Check_IndividualPerformanceScenarioWorkersLinux -Porg.gradle.performance.workerTestTaskName=fullPerformanceTest -Porg.gradle.performance.coordinatorBuildId=%teamcity.build.id% -Porg.gradle.performance.db.password=%performance.db.password.tcagent% "-Dscan.tag.PerformanceTest" -PmaxParallelForks=%maxParallelForks% -s --daemon --continue -Djava7Home=%linux.jdk.for.gradle.compile% --build-cache "-Dgradle.cache.remote.url=%gradle.cache.remote.url%" "-Dgradle.cache.remote.username=%gradle.cache.remote.username%" "-Dgradle.cache.remote.password=%gradle.cache.remote.password%""""
            param("org.jfrog.artifactory.selectedDeployableServer.defaultModuleVersionConfiguration", "GLOBAL")
        }
    }
}
