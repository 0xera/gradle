import groovy.text.SimpleTemplateEngine

// to get a clean
apply id: 'base'

repositories {
    mavenCentral()
}
configurations {
    ftpAntTask
}
dependencies {
    ftpAntTask module("org.apache.ant:ant-commons-net:1.7.0") {
        module("commons-net:commons-net:1.4.1") {
            dependencies("oro:oro:2.0.8@jar")
        }
    }
}

webSrcDir = file('src')

gradleCorePath = projectDir.parentFile

gradleCoreProperties = GUtil.loadProperties(new File(gradleCorePath, Project.GRADLE_PROPERTIES))

version = gradleCoreProperties.previousVersion

buildWebsiteDir = new File(System.getProperty('user.home'), 'Sites/gradle')

task userguideContent << {
    def startParams = gradle.startParameter.newBuild()
    startParams.taskNames = ['websiteDocs']
    startParams.currentDir = gradleCorePath
    def launcher = GradleLauncher.newInstance(startParams)
    launcher.run().rethrowFailure()
}

task html(dependsOn: userguideContent) << {
    buildWebsiteDir.mkdirs()
    File webContentSrcDir = new File(webSrcDir, 'content')
    def engine = new SimpleTemplateEngine()
    def binding = [
            php: new PhpIncludes(phpSrcDir: new File(webSrcDir, 'php')),
            currentRelease: version,
            sidebar: engine.createTemplate(new File(webSrcDir, 'sidebar.html')).make(currentRelease: version).toString()
    ]
    def skeletonTemplate = engine.createTemplate(new File(webSrcDir, 'skeleton.html'))
    Closure transformClosure = {File contentFile ->
        logger.info "Processing $contentFile"
        def fileInfo = extractInfo(contentFile)
        def contentTemplate = engine.createTemplate(fileInfo.content)
        String content = contentTemplate.make(binding).toString()
        new File(buildWebsiteDir, contentFile.name).text =
            fileInfo.prefix + skeletonTemplate.make(binding + [fileName: contentFile.name, content: content, title: fileInfo.title]).toString()
    }
    webContentSrcDir.eachFileMatch(~/^.+?\.html$/, transformClosure)
    transformClosure("$gradleCorePath/subprojects/gradle-docs/build/websiteDocs/getting-started.html" as File)
    transformClosure("$webContentSrcDir/index.php" as File)
    transformClosure("$webContentSrcDir/news.php" as File)

    copy {
        from webSrcDir
        into buildWebsiteDir
        include 'css/**'
        include 'img/**'
    }
}

def extractInfo(File contentFile) {
    try {
        def info
        if (contentFile.name.startsWith('index.')) {
            info = [title: 'Home', content: contentFile.text]
        } else {
            String content = '<html>' + contentFile.text + '</html>'
            def doc = new XmlParser().parseText(content)
            def title = doc.'**'.h1[0].text().trim()
            info = [title:  title, content: contentFile.text]
        }
        if (contentFile.name.endsWith('.php')) {
            File webPhpSrcDir = new File(webSrcDir, 'php')
            String prefix = contentFile.name.replace('.php', 'Php')
            File prefixFile = new File(webPhpSrcDir, "${prefix}Header.php")
            info.prefix = prefixFile.file ? prefixFile.text : ''
        } else {
            info.prefix = ''
        }

        return info
    } catch (Exception e) {
        throw new GradleException("Could not extract meta-info from $contentFile.name.", e)
    }
}

task uploadWebsite(dependsOn: html) << {
    ftp(action: 'delete') {
        fileset() {
            include(name: '*.html')
        }
    }
    ftp(action: 'send') {
        fileset(dir: buildWebsiteDir)
    }
}

task uploadLatestWebsite(dependsOn: html) << {
    ftp(action: 'send', remotedir: 'latest') {
        fileset(dir: buildWebsiteDir)
    }
}

task ciBuild(dependsOn: [clean, html, uploadLatestWebsite])

void ftp(Map args, Closure antFileset = {}) {
    ant {
        taskdef(name: 'ftp',
                classname: 'org.apache.tools.ant.taskdefs.optional.net.FTP',
                classpath: configurations.ftpAntTask.asPath)
        Map ftpArgs = args + [
                server: 'ftp.gradle.org',
                userid: websiteFtpUserName,
                password: websiteFtpUserPassword
        ]
        delegate.ftp(ftpArgs) {
            antFileset.delegate = delegate
            antFileset()
        }
    }
}

class PhpIncludes {
    def File phpSrcDir

    def propertyMissing(String name) {
        File srcFile = new File(phpSrcDir, "${name}.php")
        if (!srcFile.file) {
            throw new MissingPropertyException(name, PhpIncludes.class)
        }
        srcFile.text
    }
}
