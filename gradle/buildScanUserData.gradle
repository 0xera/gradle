/*
 * Copyright 2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.gradle.api.internal.tasks.cache.DefaultTaskCacheKeyBuilder.ByteArrayToStringer
import org.gradle.internal.classloader.ClassLoaderHierarchyHasher

if (plugins.hasPlugin("com.gradle.build-scan")) {
    if (System.getenv("CI")) {
        buildScan.tag "CI"
        buildScan.link "TeamCity Build", System.getenv("BUILD_URL")
    } else {
        buildScan.tag "LOCAL"
    }

    if (gradle.startParameter.taskOutputCacheEnabled) {
        buildScan.tag 'CACHED'

        gradle.addListener(new TaskExecutionListener() {

            @Override
            void beforeExecute(Task task) {
            }

            @Override
            void afterExecute(Task task, TaskState state) {
                if (task.getPath() == ':baseServices:classpathManifest') {
                    def hasher = gradle.services.get(ClassLoaderHierarchyHasher)
                    def taskClassloaderHash = hasher.getStrictHash(task.getClass().getClassLoader())
                    task.project.buildScan.value(
                        'classpathManifest Classloader hash',
                        new ByteArrayToStringer(taskClassloaderHash.asBytes()).toString())
                }
            }
        })
    }
}
