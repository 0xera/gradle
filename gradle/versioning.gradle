def timestampFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmssZ')
timestampFormat.timeZone = TimeZone.getTimeZone("UTC")

if (incomingDistributionsBuildReceipt) {
    ext.versionBase = incomingDistributionsBuildReceipt.versionBase
    ext.buildTimestamp = incomingDistributionsBuildReceipt.buildTimestamp
} else {
    ext.versionBase = rootProject.file("version.txt").text

    if (project.hasProperty("buildTimestamp")) {
        ext.buildTime = timestampFormat.parse(buildTimestamp)
    } else {
        File timestampFile = file("$buildDir/timestamp.txt")
        if (timestampFile.isFile()) {
            boolean uptodate = true
            def modified = timestampFile.lastModified()
            project(':core').fileTree('src/main').visit {fte ->
                if (fte.file.isFile() && fte.lastModified > modified) {
                    uptodate = false
                    fte.stopVisiting()
                }
            }
            if (!uptodate) {
                timestampFile.setLastModified(new Date().time)
            }
        } else {
            timestampFile.parentFile.mkdirs()
            timestampFile.createNewFile()
        }

        ext.buildTime = new Date(timestampFile.lastModified())
        ext.buildTimestamp = timestampFormat.format(buildTime)
    }
}

ext.rcNumber = project.hasProperty("rcNumber") ? project.rcNumber : null
ext.finalRelease = project.hasProperty("finalRelease") ? project.finalRelease as boolean : false
if (rcNumber != null && finalRelease) {
    throw new InvalidUserDataException("Cannot set rcNumber and finalRelease at the same time")
}

version = versionBase
if (rcNumber != null) {
    version += "-rc-$rcNumber"
}
ext.isSnapshot = finalRelease == false && rcNumber == null
if (isSnapshot) {
    version += "-$buildTimestamp"
}