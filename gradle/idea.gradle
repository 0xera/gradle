import org.jetbrains.gradle.ext.runConfigurations.*

buildscript {
    dependencies {
        classpath files("${rootProject.projectDir.absolutePath}/gradle-idea-ext.jar")
    }
}

allprojects {
    apply plugin: "idea"
    apply plugin: org.jetbrains.gradle.ext.IdeaExtPlugin

    idea {
        module {
            // Force everything to Java 6, pending detangling some int test cycles or switching to project-per-source-set mapping
            languageLevel = new org.gradle.plugins.ide.idea.model.IdeaLanguageLevel("1.6")
            targetBytecodeVersion = JavaVersion.VERSION_1_6

            iml {
                whenMerged { module ->
                    module.dependencies.removeAll {
                        it instanceof org.gradle.plugins.ide.idea.model.ModuleLibrary &&
                        it.classes.any {
                            // remove all Gradle build output directories from all scopes
                            it.url.contains('/build/classes/') ||
                            it.url.contains('/build/resources/') ||
                            // remove possible resource directories from all scopes
                            // replaced by java-resource/java-test-resource
                            it.url.contains('$MODULE_DIR$/src/') ||
                            // keep for build/generated-resources/main/*-classpath.properties
                            // required by DefaultModuleRegistry
                            (it.url.contains('$MODULE_DIR$/build/') && !it.url.contains('generated-resources'))
                        }
                    }
                    // remove all build directories from sourceFolders
                    // f.e. buildInit module contains such a sourceFolder
                    module.sourceFolders.removeAll {
                        it.url.contains('$MODULE_DIR$/build/')
                    }
                }
                withXml {
                    def node = it.asNode()
                    def content = node.component.find { it.'@name' == 'NewModuleRootManager' }.content[0]
                    content.sourceFolder.each { sourceFolder ->
                        // make resource directories a java-resource / java-test-resource type in Idea
                        if(sourceFolder.@url?.endsWith('/resources')) {
                            sourceFolder.attributes().with {
                                boolean isTestSource = (remove('isTestSource') == 'true')
                                put('type', isTestSource ? 'java-test-resource' : 'java-resource')
                            }
                        }
                    }
                }
            }
        }
    }
}

// import org.jetbrains.gradle.ext.runConfigurations.Application

idea {
    module {
        excludeDirs += file('intTestHomeDir')
        excludeDirs += file('buildSrc/build')
        excludeDirs += file('buildSrc/.gradle')
    }

    project.settings {
        compiler {
	        processHeapSize = 2042
	    }

        copyright {
            useDefault = "ASL2"
            profiles {
                ASL2 {
                    notice =
"""Copyright \${today.year} the original author or authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."""
                    keyword = "Copyright"
                }
            }
        }

        runConfigurations {
            "Gradle"(Application) {
                mainClass = 'org.gradle.debug.GradleRunConfiguration'
                workingDirectory = rootProject.projectDir.absolutePath
                moduleName = 'integTest'
            }

            def gradleRunners = [
                "Regenerate IDEA metadata": "idea",
                "Regenerate Int Test Image": "prepareVersionsInfo intTestImage publishLocalArchives"
            ]

            gradleRunners.each { runnerName, commandLine ->
                create(runnerName, Application) {
                    mainClass = "org.gradle.testing.internal.util.GradlewRunner"
                    programParameters = commandLine
                    workingDirectory = rootProject.projectDir.absolutePath
                    moduleName = "internalTesting"
                    envs = ["TERM": "xterm"]
                    beforeRun {
                        make(Make) {
                            enabled = false
                        }
                    }
                }
            }

            "Remote debug port 5005"(Remote) {
                mode = Remote.RemoteMode.ATTACH
                transport = Remote.RemoteTransport.SOCKET
                host = "localhost"
                port = 5005
            }
        }

    }

    project {
        wildcards += ['?*.gradle']

        vcs = 'Git'
        ipr {
            withXml { provider ->
                def node = provider.asNode()

                // Set gradle home
                def gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
                gradleSettings.appendNode('option', [name: 'SDK_HOME', value: gradle.gradleHomeDir.absolutePath])

                // Code formatting options
                def codeFormatSettings = new XmlParser().parseText('''
          <component name="ProjectCodeStyleSettingsManager">
            <option name="PER_PROJECT_SETTINGS">
              <value>
                <option name="USE_SAME_INDENTS" value="true" />
                <option name="CLASS_COUNT_TO_USE_IMPORT_ON_DEMAND" value="999" />
                <option name="RIGHT_MARGIN" value="200" />
                <option name="JD_ALIGN_PARAM_COMMENTS" value="false" />
                <option name="JD_ALIGN_EXCEPTION_COMMENTS" value="false" />
                <option name="JD_P_AT_EMPTY_LINES" value="false" />
                <option name="JD_KEEP_EMPTY_PARAMETER" value="false" />
                <option name="JD_KEEP_EMPTY_EXCEPTION" value="false" />
                <option name="JD_KEEP_EMPTY_RETURN" value="false" />
                <option name="WRAP_COMMENTS" value="true" />
                <option name="IF_BRACE_FORCE" value="3" />
                <option name="DOWHILE_BRACE_FORCE" value="3" />
                <option name="WHILE_BRACE_FORCE" value="3" />
                <option name="FOR_BRACE_FORCE" value="3" />
                <codeStyleSettings language="JAVA">
                  <option name="KEEP_CONTROL_STATEMENT_IN_ONE_LINE" value="false" />
                  <option name="IF_BRACE_FORCE" value="3" />
                  <option name="DOWHILE_BRACE_FORCE" value="3" />
                  <option name="WHILE_BRACE_FORCE" value="3" />
                  <option name="FOR_BRACE_FORCE" value="3" />
                </codeStyleSettings>
                <GroovyCodeStyleSettings>
                  <option name="ALIGN_NAMED_ARGS_IN_MAP" value="false" />
                  <option name="CLASS_COUNT_TO_USE_IMPORT_ON_DEMAND" value="999" />
                </GroovyCodeStyleSettings>
              </value>
            </option>
            <option name="USE_PER_PROJECT_SETTINGS" value="true" />
          </component>
        ''')
                node.append(codeFormatSettings)

                node.append(new XmlParser().parseText('''
                    <component name="GroovyCompilerProjectConfiguration">
                      <excludes>
                        <file url="file://$PROJECT_DIR$/subprojects/plugins/src/test/groovy/org/gradle/api/internal/tasks/testing/junit/JUnitTestClassProcessorTest.groovy" />
                      </excludes>
                      <option name="heapSize" value="2000" />
                    </component>
                '''))

                node.append(new NodeBuilder().component(name: 'FrameworkDetectionExcludesConfiguration') {
                  type(id: 'android')
                  type(id: 'web')
                })

                def buildSrcModuleFile = 'buildSrc/buildSrc.iml'
                if (file(buildSrcModuleFile).exists()) {
                    def projects = node.component.find { it.@name == 'ProjectModuleManager' }
                    if (projects) {
                        def buildSrc = projects.modules.module.find { it.@filepath.contains('buildSrc') }
                        if (!buildSrc) {
                            projects.modules.find().appendNode('module', [
                                fileurl: "file://\$PROJECT_DIR\$/${buildSrcModuleFile}",
                                filepath: "\$PROJECT_DIR\$/${buildSrcModuleFile}"
                            ])
                        }
                    }
                }
            }
        }
    }

}

def docsProject = project(":docs")
docsProject.afterEvaluate {
    idea.project.settings.runConfigurations {
        defaults(JUnit) {
            def defaultTestVmParams = [
                "-ea",
                "-Dorg.gradle.docs.releasenotes.source=${docsProject.releaseNotesMarkdown.markdownFile}",
                "-Dorg.gradle.docs.releasenotes.rendered=${new File(docsProject.releaseNotes.destinationDir, docsProject.releaseNotes.fileName)}",
                "-DintegTest.gradleHomeDir=\$MODULE_DIR\$/build/integ test",
                "-DintegTest.gradleUserHomeDir=${rootProject.file('intTestHomeDir').absolutePath}",
                "-DintegTest.libsRepo=${rootProject.file('build/repo').absolutePath}",
                "-Dorg.gradle.integtest.daemon.registry=${rootProject.file('build/daemon').absolutePath}",
                "-DintegTest.distsDir=${rootProject.distsDir.absolutePath}",
                "-Dorg.gradle.public.api.includes=${publicApiIncludes.join(':')}",
                "-Dorg.gradle.public.api.excludes=${publicApiExcludes.join(':')}",
                "-Dorg.gradle.integtest.executer=embedded",
                "-Dorg.gradle.integtest.versions=latest",
                "-Dorg.gradle.integtest.native.toolChains=default",
                "-Dorg.gradle.integtest.multiversion=default",
                "-Dorg.gradle.integtest.testkit.compatibility=current",
                "-Xmx512m"
            ]

            if (!javaVersion.java8Compatible) {
                defaultTestVmParams += "-XX:MaxPermSize=512m"
            }

            vmParameters = defaultTestVmParams.collect { it.contains(" ") ? "\"$it\"" : it }.join(" ")

            def lang = System.getenv('LANG') ?: 'en_US.UTF-8'
            envs = ['LANG': lang]
        }
    }
}

